

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local EventEmitter, proto, utils, path, basename, fs, createServer = EventEmitter, proto, utils, path, basename, fs, createServer;
createServer = (function (this, ...)
local createServer = _debug.getinfo(1, 'f').func;
local arguments = _arguments(...);
local app, i = app, i;
app = (function (this, req, res, next)
local app = _debug.getinfo(1, 'f').func;
if app:handle(req, res, next) then end;
end);
if utils:merge(app, proto) then end;
if utils:merge(app, EventEmitter.prototype) then end;
(app).route = ("/");
(app).stack = _arr({});
i = (0);
while (i < (arguments).length) do

if app:use(arguments[i]) then end;

if (function () i = i + 1; return i; end)() then end;
end
if true then return app; end;
end);
EventEmitter = (require(global, ("events"))).EventEmitter;
proto = require(global, ("./proto"));
utils = require(global, ("./utils"));
path = require(global, ("path"));
basename = (path).basename;
fs = require(global, ("fs"));
if require(global, ("./patch")) then end;
exports = (function () local _r = createServer; (module).exports = _r; return _r; end)();
(exports).version = ("2.7.11");
(exports).mime = (require(global, ("./middleware/static"))).mime;
(exports).proto = proto;
(exports).middleware = _obj({
  });
(exports).utils = utils;
(createServer).createServer = createServer;
if fs:readdirSync((____dirname + ("/middleware"))):forEach((function (this, filename)
local name, load = name, load;
load = (function (this)
local load = _debug.getinfo(1, 'f').func;
local a = a;
a = require(global, (("./middleware/") + name));
if true then return a; end;
end);
if (not (_regexp("\\.js$", ""):test(filename))) then
if true then return; end;
end
name = basename(global, filename, (".js"));
if (function () local base, prop = (exports).middleware, "__defineGetter__"; return base[prop](base, name, load); end)() then end;
if (function () local base, prop = exports, "__defineGetter__"; return base[prop](base, name, load); end)() then end;
end)) then end;

return _module.exports;
end