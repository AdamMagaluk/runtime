

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, unauthorized, basicAuth = utils, unauthorized, basicAuth;
utils = require(global, ("../utils"));
unauthorized = (utils).unauthorized;
(module).exports = (function () basicAuth = (function (this, ...)
local basicAuth = _debug.getinfo(1, 'f').func;
local arguments = _arguments(...);
local callback, realm = ...;
local username, password = username, password;
username = nil;
password = nil;
if _truthy((("string") == _typeof(callback))) then
username = callback;
password = realm;
if (("string") ~= _typeof(password)) then
_error(_new(Error, ("password argument required")))
end
realm = (arguments)[(2)];
callback = (function (this, user, pass)
if true then return (user == username) and (pass == password); end;
end)
  ;
end
realm = realm or ("Authorization Required");
if true then return (function (this, req, res, next)
local authorization, parts, scheme, credentials, index, user, pass, pause = authorization, parts, scheme, credentials, index, user, pass, pause;
authorization = ((req).headers).authorization;
if _truthy((req).user) then
if true then return next(global); end;
end
if (not (authorization)) then
if true then return unauthorized(global, res, realm); end;
end
parts = authorization:split((" "));
if ((parts).length ~= (2)) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (400)); end)()); end;
end
scheme = (parts)[(0)];
credentials = _new(Buffer, (parts)[(1)], ("base64")):toString();
index = credentials:indexOf((":"));
if _truthy((("Basic") ~= scheme) or (index < (0))) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (400)); end)()); end;
end
user = credentials:slice((0), index);
pass = credentials:slice((index + (1)));
if ((callback).length >= (3)) then
pause = utils:pause(req);
if callback(global, user, pass, (function (this, err, user)
if _truthy(err or (not (user))) then
if true then return unauthorized(global, res, realm); end;
end
(req).user = (function () local _r = user; (req).remoteUser = _r; return _r; end)();
if next(global) then end;
if pause:resume() then end;
end)) then end;
else
if _truthy(callback(global, user, pass)) then
(req).user = (function () local _r = user; (req).remoteUser = _r; return _r; end)();
if next(global) then end;
else
if unauthorized(global, res, realm) then end;
end
end
end); end;
end); return basicAuth; end)();

return _module.exports;
end