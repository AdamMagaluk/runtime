

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, Cookie, debug, signature, crc32, cookieSession = utils, Cookie, debug, signature, crc32, cookieSession;
utils = require(global, ("./../utils"));
Cookie = require(global, ("./session/cookie"));
debug = require(global, ("debug"))(global, ("connect:cookieSession"));
signature = require(global, ("cookie-signature"));
crc32 = require(global, ("buffer-crc32"));
(module).exports = (function () cookieSession = (function (this, options)
local cookieSession = _debug.getinfo(1, 'f').func;
local key, trustProxy, cookieSession = key, trustProxy, cookieSession;
options = options or _obj({
  });
key = (options).key or ("connect.sess");
trustProxy = (options).proxy;
if true then return (function () cookieSession = (function (this, req, res, next)
local cookieSession = _debug.getinfo(1, 'f').func;
local secret, cookie, rawCookie, unsigned, originalHash = secret, cookie, rawCookie, unsigned, originalHash;
secret = (options).secret or (req).secret;
if (not (secret)) then
_error(_new(Error, ("`secret` option required for cookie sessions")))
end
(req).session = _obj({
  });
cookie = (function () local _r = _new(Cookie, (options).cookie); ((req).session).cookie = _r; return _r; end)();
if ((0) ~= (req).originalUrl:indexOf(cookie.path)) then
if true then return next(global); end;
end
if _truthy((not ((options).secret)) and (req).secret) then
(req).session = ((req).signedCookies)[key] or _obj({
  });
((req).session).cookie = cookie;
else
rawCookie = ((req).cookies)[key];
if _truthy(rawCookie) then
unsigned = utils:parseSignedCookie(rawCookie, secret);
if _truthy(unsigned) then
originalHash = crc32:signed(unsigned);
(req).session = utils:parseJSONCookie(unsigned) or _obj({
  });
((req).session).cookie = cookie;
end
end
end
if res:on(("header"), (function (this)
local proto, tls, val = proto, tls, val;
if (not ((req).session)) then
if debug(global, ("clear session")) then end;
(cookie).expires = _new(Date, (0));
if res:setHeader(("Set-Cookie"), cookie:serialize(key, (""))) then end;
if true then return; end;
end
((req).session).cookie = nil;
proto = ((req).headers)[("x-forwarded-proto")] or (""):toLowerCase();
tls = ((req).connection).encrypted or trustProxy and (("https") == (proto:split(_regexp("\\s*,\\s*", "")))[(0)]);
if _truthy((cookie).secure and (not (tls))) then
if true then return debug(global, ("not secured")); end;
end
if debug(global, ("serializing %j"), req.session) then end;
val = (("j:") + JSON:stringify(req.session));
if _truthy((originalHash == crc32:signed(val))) then
if true then return debug(global, ("unmodified session")); end;
end
val = (("s:") + signature:sign(val, secret));
val = cookie:serialize(key, val);
if debug(global, ("set-cookie %j"), cookie) then end;
if res:setHeader(("Set-Cookie"), val) then end;
end)) then end;
if next(global) then end;
end); return cookieSession; end)(); end;
end); return cookieSession; end)();

return _module.exports;
end