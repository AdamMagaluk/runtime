

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, fs, env, errorHandler = utils, fs, env, errorHandler;
utils = require(global, ("../utils"));
fs = require(global, ("fs"));
env = ((process).env).NODE_ENV or ("development");
exports = (function () local _r = (function () errorHandler = (function (this)
local errorHandler = _debug.getinfo(1, 'f').func;
local errorHandler = errorHandler;
if true then return (function () errorHandler = (function (this, err, req, res, next)
local errorHandler = _debug.getinfo(1, 'f').func;
local accept, __K__error, prop, json = accept, __K__error, prop, json;
if _truthy((err).status) then
(res).statusCode = (err).status;
end
if ((res).statusCode < (400)) then
(res).statusCode = (500);
end
if (("test") ~= env) then
if (function () local base, prop = console, "error"; return base[prop](base, err.stack); end)() then end;
end
accept = ((req).headers).accept or ("");
if _truthy(_bit.bnot(accept:indexOf(("html")))) then
if fs:readFile((____dirname + ("/../public/style.css")), ("utf8"), (function (this, e, style)
if fs:readFile((____dirname + ("/../public/error.html")), ("utf8"), (function (this, e, html)
local stack = stack;
stack = (err).stack or (""):split(("\n")):slice((1)):map((function (this, v)
if true then return ((("<li>") + v) + ("</li>")); end;
end)):join((""));
html = html:replace(("{style}"), style):replace(("{stack}"), stack):replace(("{title}"), exports.title):replace(("{statusCode}"), res.statusCode):replace(_regexp("\\{error\\}", "g"), utils:escape(err:toString()));
if res:setHeader(("Content-Type"), ("text/html; charset=utf-8")) then end;
if (function () local base, prop = res, "end"; return base[prop](base, html); end)() then end;
end)) then end;
end)) then end;
else
if _truthy(_bit.bnot(accept:indexOf(("json")))) then
_K_error = _obj({
  ["message"]=(err).message,
  ["stack"]=(err).stack});
for prop in _pairs(err) do
(_K_error)[prop] = (err)[prop];
end
json = JSON:stringify(_obj({
  ["error"]=_K_error}));
if res:setHeader(("Content-Type"), ("application/json")) then end;
if (function () local base, prop = res, "end"; return base[prop](base, json); end)() then end;
else
if res:writeHead(res.statusCode, _obj({
  ["Content-Type"]=("text/plain")})) then end;
if (function () local base, prop = res, "end"; return base[prop](base, err.stack); end)() then end;
end
end
end); return errorHandler; end)(); end;
end); return errorHandler; end)(); (module).exports = _r; return _r; end)();
(exports).title = ("Connect");

return _module.exports;
end