

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, ____limit = utils, ____limit;
utils = require(global, ("../utils"));
__limit = require(global, ("./limit"));
exports = (function () local _r = (function (this, options)
local options, strict, limit, json = options, strict, limit, json;
options = options or _obj({
  });
strict = ((options).strict ~= (false));
limit = __limit(global, (options).limit or ("1mb"));
if true then return (function () json = (function (this, req, res, next)
local json = _debug.getinfo(1, 'f').func;
if _truthy((req)._body) then
if true then return next(global); end;
end
(req).body = (req).body or _obj({
  });
if (not _truthy(utils:hasBody(req))) then
if true then return next(global); end;
end
if (not _truthy((exports).regexp:test(utils:mime(req)))) then
if true then return next(global); end;
end
(req)._body = (true);
if limit(global, req, res, (function (this, err)
local buf = buf;
if _truthy(err) then
if true then return next(global, err); end;
end
buf = ("");
if req:setEncoding(("utf8")) then end;
if req:on(("data"), (function (this, chunk)
buf = buf + chunk ;
end)) then end;
if req:on(("end"), (function (this)
local first = first;
first = (buf:trim())[(0)];
if _truthy(((0) == (buf).length)) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (400), ("invalid json, empty body")); end)()); end;
end
if _truthy(strict and (("{") ~= first) and (("[") ~= first)) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (400), ("invalid json")); end)()); end;
end
local _e = nil
local _s, _r = _xpcall(function ()
(req).body = JSON:parse(buf, options.reviver);
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
(err).body = buf;
(err).status = (400);
if true then return next(global, err); end;
end

if next(global) then end;
end)) then end;
end)) then end;
end); return json; end)(); end;
end); (module).exports = _r; return _r; end)();
(exports).regexp = _regexp("^application\\/([\\w!#\\$%&\\*`\\-\\.\\^~]*\\+)?json$", "i");

return _module.exports;
end