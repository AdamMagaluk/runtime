

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local bytes, buf, defaultBufferDuration, logger, compile = bytes, buf, defaultBufferDuration, logger, compile;
compile = (function (this, fmt)
local compile = _debug.getinfo(1, 'f').func;
local js = js;
fmt = fmt:replace(_regexp("\"", "g"), ("\\\""));
js = ((("  return \"") + fmt:replace(_regexp(":([-\\w]{2,})(?:\\[([^\\]]+)\\])?", "g"), (function (this, __, name, arg)
if true then return ((((("\"\n    + (tokens[\"") + name) + ("\"](req, res, \"")) + arg) + ("\") || \"-\") + \"")); end;
end))) + ("\";"));
if true then return _new(Function, ("tokens, req, res"), js); end;
end);
bytes = require(global, ("bytes"));
buf = _arr({});
defaultBufferDuration = (1000);
exports = (function () local _r = (function () logger = (function (this, options)
local logger = _debug.getinfo(1, 'f').func;
local immediate, fmt, stream, buffer, realStream, interval, logger = immediate, fmt, stream, buffer, realStream, interval, logger;
if _truthy((("object") == _typeof(options))) then
options = options or _obj({
  });
else
if _truthy(options) then
options = _obj({
  ["format"]=options});
else
options = _obj({
  });
end
end
immediate = (options).immediate;
fmt = (exports)[(options).format] or (options).format or (exports).default;
if (("function") ~= _typeof(fmt)) then
fmt = compile(global, fmt);
end
stream = (options).stream or (process).stdout;
buffer = (options).buffer;
if _truthy(buffer) then
realStream = stream;
interval = (_truthy((("number") == _typeof(buffer))) and {buffer} or {defaultBufferDuration})[1];
if setInterval(global, (function (this)
if _truthy((buf).length) then
if realStream:write(buf:join((""))) then end;
(buf).length = (0);
end
end), interval) then end;
stream = _obj({
  ["write"]=(function (this, str)
if buf:push(str) then end;
end)});
end
if true then return (function () logger = (function (this, req, res, next)
local logger = _debug.getinfo(1, 'f').func;
local line, __K__end = line, __K__end;
(req)._startTime = _new(Date);
if _truthy(immediate) then
line = fmt(global, exports, req, res);
if _truthy(((null) == line)) then
if true then return; end;
end
if stream:write((line + ("\n"))) then end;
else
_K_end = (res)["end"];
(res)["end"] = (function (this, chunk, encoding)
local line = line;
(res)["end"] = _K_end;
if (function () local base, prop = res, "end"; return base[prop](base, chunk, encoding); end)() then end;
line = fmt(global, exports, req, res);
if _truthy(((null) == line)) then
if true then return; end;
end
if stream:write((line + ("\n"))) then end;
end);
end
if next(global) then end;
end); return logger; end)(); end;
end); return logger; end)(); (module).exports = _r; return _r; end)();
(exports).token = (function (this, name, fn)
(exports)[name] = fn;
if true then return this; end;
end);
(exports).format = (function (this, name, str)
(exports)[name] = str;
if true then return this; end;
end);
if exports:format(("default"), (":remote-addr - - [:date] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"")) then end;
if exports:format(("short"), (":remote-addr - :method :url HTTP/:http-version :status :res[content-length] - :response-time ms")) then end;
if exports:format(("tiny"), (":method :url :status :res[content-length] - :response-time ms")) then end;
if exports:format(("dev"), (function (this, tokens, req, res)
local status, len, color = status, len, color;
status = (res).statusCode;
len = parseInt(global, res:getHeader(("Content-Length")), (10));
color = (32);
if (status >= (500)) then
color = (31)
  ;
else
if (status >= (400)) then
color = (33)
  ;
else
if (status >= (300)) then
color = (36);
end
end
end
len = (_truthy(isNaN(global, len)) and {("")} or {(function () local _r = ((" - ") + bytes(global, len)); len = _r; return _r; end)()})[1];
if true then return (((((((((((((("\x1b[90m") + (req).method)
    + (" ")) + (req).originalUrl) + (" "))
    + ("\x1b[")) + color) + ("m")) + (res).statusCode)
    + (" \x1b[90m"))
    + ((_new(Date) - (req)._startTime)))
    + ("ms")) + len)
    + ("\x1b[0m")); end;
end)) then end;
if exports:token(("url"), (function (this, req)
if true then return (req).originalUrl or (req).url; end;
end)) then end;
if exports:token(("method"), (function (this, req)
if true then return (req).method; end;
end)) then end;
if exports:token(("response-time"), (function (this, req)
if true then return (_new(Date) - (req)._startTime); end;
end)) then end;
if exports:token(("date"), (function (this)
if true then return _new(Date):toUTCString(); end;
end)) then end;
if exports:token(("status"), (function (this, req, res)
if true then return (res).statusCode; end;
end)) then end;
if exports:token(("referrer"), (function (this, req)
if true then return ((req).headers)[("referer")] or ((req).headers)[("referrer")]; end;
end)) then end;
if exports:token(("remote-addr"), (function (this, req)
local sock = sock;
if _truthy((req).ip) then
if true then return (req).ip; end;
end
sock = (req).socket;
if _truthy((sock).socket) then
if true then return ((sock).socket).remoteAddress; end;
end
if true then return (sock).remoteAddress; end;
end)) then end;
if exports:token(("http-version"), (function (this, req)
if true then return (((req).httpVersionMajor + (".")) + (req).httpVersionMinor); end;
end)) then end;
if exports:token(("user-agent"), (function (this, req)
if true then return ((req).headers)[("user-agent")]; end;
end)) then end;
if exports:token(("req"), (function (this, req, res, field)
if true then return ((req).headers)[field:toLowerCase()]; end;
end)) then end;
if exports:token(("res"), (function (this, req, res, field)
if true then return ((res)._headers or _obj({
  }))[field:toLowerCase()]; end;
end)) then end;

return _module.exports;
end