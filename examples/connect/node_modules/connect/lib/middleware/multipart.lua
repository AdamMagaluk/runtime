

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local multiparty, ____limit, utils, qs = multiparty, ____limit, utils, qs;
multiparty = require(global, ("multiparty"));
__limit = require(global, ("./limit"));
utils = require(global, ("../utils"));
qs = require(global, ("qs"));
exports = (function () local _r = (function (this, options)
local limit, multipart = limit, multipart;
options = options or _obj({
  });
limit = __limit(global, (options).limit or ("100mb"));
if true then return (function () multipart = (function (this, req, res, next)
local multipart = _debug.getinfo(1, 'f').func;
if _truthy((req)._body) then
if true then return next(global); end;
end
(req).body = (req).body or _obj({
  });
(req).files = (req).files or _obj({
  });
if (not _truthy(utils:hasBody(req))) then
if true then return next(global); end;
end
if _truthy((("GET") == (req).method) or (("HEAD") == (req).method)) then
if true then return next(global); end;
end
if (("multipart/form-data") ~= utils:mime(req)) then
if true then return next(global); end;
end
(req)._body = (true);
if limit(global, req, res, (function (this, err)
local form, data, files, done, ondata = form, data, files, done, ondata;
ondata = (function (this, name, val, data)
local ondata = _debug.getinfo(1, 'f').func;
if _truthy(Array:isArray(data[name])) then
if (data)[name]:push(val) then end;
else
if _truthy((data)[name]) then
(data)[name] = _arr({[0]=(data)[name], val});
else
(data)[name] = val;
end
end
end);
if _truthy(err) then
if true then return next(global, err); end;
end
form = _new((multiparty).Form);
data = _obj({
  });
files = _obj({
  });
done = nil;
if Object:keys(options):forEach((function (this, key)
(form)[key] = (options)[key];
end)) then end;
if form:on(("field"), (function (this, name, val)
if ondata(global, name, val, data) then end;
end)) then end;
if (not _truthy((options).defer)) then
if form:on(("file"), (function (this, name, val)
(val).name = (val).originalFilename;
if ondata(global, name, val, files) then end;
end)) then end;
end
if form:on(("error"), (function (this, err)
if (not _truthy((options).defer)) then
(err).status = (400);
if next(global, err) then end;
end
done = (true);
end)) then end;
if form:on(("close"), (function (this)
if _truthy(done) then
if true then return; end;
end
local _e = nil
local _s, _r = _xpcall(function ()
(req).body = qs:parse(data);
(req).files = qs:parse(files);
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if form:emit(("error"), err) then end;
if true then return; end;
end

if (not _truthy((options).defer)) then
if next(global) then end;
end
end)) then end;
if form:parse(req) then end;
if _truthy((options).defer) then
(req).form = form;
if next(global) then end;
end
end)) then end;
end); return multipart; end)(); end;
end); (module).exports = _r; return _r; end)();

return _module.exports;
end