

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Store, MemoryStore = Store, MemoryStore;
Store = require(global, ("./store"));
MemoryStore = (function () local _r = (function () MemoryStore = (function (this)
local MemoryStore = _debug.getinfo(1, 'f').func;
(this).sessions = _obj({
  });
end); return MemoryStore; end)(); (module).exports = _r; return _r; end)();
((MemoryStore).prototype).__proto__ = (Store).prototype;
((MemoryStore).prototype).get = (function (this, sid, fn)
local self = self;
self = this;
if process:nextTick((function (this)
local expires, sess = expires, sess;
expires = nil;
sess = ((self).sessions)[sid];
if _truthy(sess) then
sess = JSON:parse(sess);
expires = (_truthy((("string") == _typeof(((sess).cookie).expires))) and {_new(Date, ((sess).cookie).expires)} or {((sess).cookie).expires})[1];
if _truthy((not (expires)) or (_new(Date) < expires)) then
if fn(global, (null), sess) then end;
else
if self:destroy(sid, fn) then end;
end
else
if fn(global) then end;
end
end)) then end;
end);
((MemoryStore).prototype).set = (function (this, sid, sess, fn)
local self = self;
self = this;
if process:nextTick((function (this)
((self).sessions)[sid] = JSON:stringify(sess);
if fn and fn(global) then end;
end)) then end;
end);
((MemoryStore).prototype).destroy = (function (this, sid, fn)
local self = self;
self = this;
if process:nextTick((function (this)
((self).sessions)[sid] = nil;
if fn and fn(global) then end;
end)) then end;
end);
((MemoryStore).prototype).all = (function (this, fn)
local arr, keys, i, len = arr, keys, i, len;
arr = _arr({});
keys = Object:keys(this.sessions);
i = (0);
len = (keys).length;
while (i < len) do

if arr:push((this).sessions[(keys)[i]]) then end;

if (function () i = i + 1; return i; end)() then end;
end
if fn(global, (null), arr) then end;
end);
((MemoryStore).prototype).clear = (function (this, fn)
(this).sessions = _obj({
  });
if fn and fn(global) then end;
end);
((MemoryStore).prototype).length = (function (this, fn)
if fn(global, (null), Object:keys(this.sessions).length) then end;
end);

return _module.exports;
end