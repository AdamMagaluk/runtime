

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, Session = utils, Session;
utils = require(global, ("../../utils"));
Session = (function () local _r = (function () Session = (function (this, req, data)
local Session = _debug.getinfo(1, 'f').func;
if Object:defineProperty(this, ("req"), _obj({
  ["value"]=req})) then end;
if Object:defineProperty(this, ("id"), _obj({
  ["value"]=(req).sessionID})) then end;
if _truthy((("object") == _typeof(data))) then
if utils:merge(this, data) then end;
end
end); return Session; end)(); (module).exports = _r; return _r; end)();
((Session).prototype).touch = (function (this)
if true then return this:resetMaxAge(); end;
end);
((Session).prototype).resetMaxAge = (function (this)
((this).cookie).maxAge = ((this).cookie).originalMaxAge;
if true then return this; end;
end);
((Session).prototype).save = (function (this, fn)
if ((this).req).sessionStore:set(this.id, this, fn or (function (this)

end)) then end;
if true then return this; end;
end);
((Session).prototype).reload = (function (this, fn)
local req, store = req, store;
req = (this).req;
store = ((this).req).sessionStore;
if store:get(this.id, (function (this, err, sess)
if _truthy(err) then
if true then return fn(global, err); end;
end
if (not _truthy(sess)) then
if true then return fn(global, _new(Error, ("failed to load session"))); end;
end
if store:createSession(req, sess) then end;
if fn(global) then end;
end)) then end;
if true then return this; end;
end);
((Session).prototype).destroy = (function (this, fn)
((this).req).session = nil;
if ((this).req).sessionStore:destroy(this.id, fn) then end;
if true then return this; end;
end);
((Session).prototype).regenerate = (function (this, fn)
if ((this).req).sessionStore:regenerate(this.req, fn) then end;
if true then return this; end;
end);

return _module.exports;
end