

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local EventEmitter, Session, Cookie, Store = EventEmitter, Session, Cookie, Store;
EventEmitter = (require(global, ("events"))).EventEmitter;
Session = require(global, ("./session"));
Cookie = require(global, ("./cookie"));
Store = (function () local _r = (function () Store = (function (this, options)
local Store = _debug.getinfo(1, 'f').func;

end); return Store; end)(); (module).exports = _r; return _r; end)();
((Store).prototype).__proto__ = (EventEmitter).prototype;
((Store).prototype).regenerate = (function (this, req, fn)
local self = self;
self = this;
if this:destroy(req.sessionID, (function (this, err)
if self:generate(req) then end;
if fn(global, err) then end;
end)) then end;
end);
((Store).prototype).load = (function (this, sid, fn)
local self = self;
self = this;
if this:get(sid, (function (this, err, sess)
local req = req;
if _truthy(err) then
if true then return fn(global, err); end;
end
if (not (sess)) then
if true then return fn(global); end;
end
req = _obj({
  ["sessionID"]=sid,
  ["sessionStore"]=self});
sess = self:createSession(req, sess);
if fn(global, (null), sess) then end;
end)) then end;
end);
((Store).prototype).createSession = (function (this, req, sess)
local expires, orig = expires, orig;
expires = ((sess).cookie).expires;
orig = ((sess).cookie).originalMaxAge;
(sess).cookie = _new(Cookie, (sess).cookie);
if _truthy((("string") == _typeof(expires))) then
((sess).cookie).expires = _new(Date, expires);
end
((sess).cookie).originalMaxAge = orig;
(req).session = _new(Session, req, sess);
if true then return (req).session; end;
end);

return _module.exports;
end