

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local send, utils, parse, url = send, utils, parse, url;
send = require(global, ("send"));
utils = require(global, ("../utils"));
parse = (utils).parseUrl;
url = require(global, ("url"));
exports = (function () local _r = (function (this, root, options)
local redirect, staticMiddleware = redirect, staticMiddleware;
options = options or _obj({
  });
if (not _truthy(root)) then
_error(_new(Error, ("static() root path required")))
end
redirect = ((false) ~= (options).redirect);
if true then return (function () staticMiddleware = (function (this, req, res, next)
local staticMiddleware = _debug.getinfo(1, 'f').func;
local path, pause, resume, directory, __K__error = path, pause, resume, directory, __K__error;
resume = (function (this)
local resume = _debug.getinfo(1, 'f').func;
if next(global) then end;
if pause:resume() then end;
end);
directory = (function (this)
local directory = _debug.getinfo(1, 'f').func;
local pathname = pathname;
if (not _truthy(redirect)) then
if true then return resume(global); end;
end
pathname = (url:parse(req.originalUrl)).pathname;
(res).statusCode = (303);
if res:setHeader(("Location"), (pathname + ("/"))) then end;
if (function () local base, prop = res, "end"; return base[prop](base, ((("Redirecting to ") + utils:escape(pathname)) + ("/"))); end)() then end;
end);
_K_error = (function (this, err)
local _K_error = _debug.getinfo(1, 'f').func;
if _truthy(((404) == (err).status)) then
if true then return resume(global); end;
end
if next(global, err) then end;
end);
if _truthy((("GET") ~= (req).method) and (("HEAD") ~= (req).method)) then
if true then return next(global); end;
end
path = (parse(global, req)).pathname;
pause = utils:pause(req);
if send(global, req, path):maxage((options).maxAge or (0)):root(root):index((options).index or ("index.html")):hidden(options.hidden):on(("error"), _K_error):on(("directory"), directory):pipe(res) then end;
end); return staticMiddleware; end)(); end;
end); (module).exports = _r; return _r; end)();
(exports).mime = (send).mime;

return _module.exports;
end