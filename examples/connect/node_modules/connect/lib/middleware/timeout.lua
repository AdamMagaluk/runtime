

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local debug, timeout = debug, timeout;
debug = require(global, ("debug"))(global, ("connect:timeout"));
(module).exports = (function () timeout = (function (this, ms)
local timeout = _debug.getinfo(1, 'f').func;
ms = ms or (5000);
if true then return (function (this, req, res, next)
local id = id;
id = setTimeout(global, (function (this)
if req:emit(("timeout"), ms) then end;
end), ms);
if req:on(("timeout"), (function (this)
local err = err;
if _truthy((res).headerSent) then
if true then return debug(global, ("response started, cannot timeout")); end;
end
err = _new(Error, ("Response timeout"));
(err).timeout = ms;
(err).status = (503);
if next(global, err) then end;
end)) then end;
(req).clearTimeout = (function (this)
if clearTimeout(global, id) then end;
end);
if res:on(("header"), (function (this)
if clearTimeout(global, id) then end;
end)) then end;
if next(global) then end;
end); end;
end); return timeout; end)();

return _module.exports;
end