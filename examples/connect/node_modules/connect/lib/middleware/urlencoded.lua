

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, ____limit, qs, noop = utils, ____limit, qs, noop;
noop = (function (this, req, res, next)
local noop = _debug.getinfo(1, 'f').func;
if next(global) then end;
end);
utils = require(global, ("../utils"));
__limit = require(global, ("./limit"));
qs = require(global, ("qs"));
exports = (function () local _r = (function (this, options)
local limit, urlencoded = limit, urlencoded;
options = options or _obj({
  });
limit = __limit(global, (options).limit or ("1mb"));
if true then return (function () urlencoded = (function (this, req, res, next)
local urlencoded = _debug.getinfo(1, 'f').func;
if _truthy((req)._body) then
if true then return next(global); end;
end
(req).body = (req).body or _obj({
  });
if (not _truthy(utils:hasBody(req))) then
if true then return next(global); end;
end
if (("application/x-www-form-urlencoded") ~= utils:mime(req)) then
if true then return next(global); end;
end
(req)._body = (true);
if limit(global, req, res, (function (this, err)
local buf = buf;
if _truthy(err) then
if true then return next(global, err); end;
end
buf = ("");
if req:setEncoding(("utf8")) then end;
if req:on(("data"), (function (this, chunk)
buf = buf + chunk ;
end)) then end;
if req:on(("end"), (function (this)
local _e = nil
local _s, _r = _xpcall(function ()
(req).body = (_truthy((buf).length) and {qs:parse(buf, options)} or {_obj({
  })})[1];
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
(err).body = buf;
if true then return next(global, err); end;
end

if next(global) then end;
end)) then end;
end)) then end;
end); return urlencoded; end)(); end;
end); (module).exports = _r; return _r; end)();

return _module.exports;
end