

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, res, setHeader, ____renderHeaders, writeHead = http, res, setHeader, ____renderHeaders, writeHead;
http = require(global, ("http"));
res = ((http).ServerResponse).prototype;
setHeader = (res).setHeader;
__renderHeaders = (res)._renderHeaders;
writeHead = (res).writeHead;
if (not _truthy((res)._hasConnectPatch)) then
if (function () local base, prop = res, "__defineGetter__"; return base[prop](base, ("headerSent"), (function (this)
if true then return (this)._header; end;
end)); end)() then end;
(res).setHeader = (function (this, field, val)
local key, prev = key, prev;
key = field:toLowerCase();
prev = nil;
if _truthy((this)._headers and (("set-cookie") == key)) then
if _truthy((function () local _r = this:getHeader(field); prev = _r; return _r; end)()) then
val = (_truthy(Array:isArray(prev)) and {prev:concat(val)} or {_arr({[0]=prev, val})})[1];
end
else
if _truthy((("content-type") == key) and (this).charset) then
val = val + (("; charset=") + (this).charset);
end
end
if true then return setHeader:call(this, field, val); end;
end);
(res)._renderHeaders = (function (this)
if (not _truthy((this)._emittedHeader)) then
if this:emit(("header")) then end;
end
(this)._emittedHeader = (true);
if true then return __renderHeaders:call(this); end;
end);
(res).writeHead = (function (this, ...)
local arguments = _arguments(...);
if (not _truthy((this)._emittedHeader)) then
if this:emit(("header")) then end;
end
(this)._emittedHeader = (true);
if true then return writeHead:apply(this, arguments); end;
end);
(res)._hasConnectPatch = (true);
end

return _module.exports;
end