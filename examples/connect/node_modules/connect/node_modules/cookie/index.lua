--/ Serialize the a name value pair into a cookie string suitable for
--/ http headers. An optional options object specified cookie parameters
--/
--/ serialize('foo', 'bar', { httpOnly: true })
--/   => "foo=bar; httpOnly"
--/
--/ @param {String} name
--/ @param {String} val
--/ @param {Object} options
--/ @return {String}
function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local serialize, parse, encode, decode = serialize, parse, encode, decode;
serialize = (function (this, name, val, opt)
local enc, pairs = enc, pairs;
opt = opt or _obj({
  });
enc = (opt).encode or encode;
pairs = _arr({[0]=((name + ("=")) + enc(global, val))});
if _truthy((opt).maxAge) then
if pairs:push((("Max-Age=") + (opt).maxAge)) then end;
end
if _truthy((opt).domain) then
if pairs:push((("Domain=") + (opt).domain)) then end;
end
if _truthy((opt).path) then
if pairs:push((("Path=") + (opt).path)) then end;
end
if _truthy((opt).expires) then
if pairs:push((("Expires=") + (opt).expires:toUTCString())) then end;
end
if _truthy((opt).httpOnly) then
if pairs:push(("HttpOnly")) then end;
end
if _truthy((opt).secure) then
if pairs:push(("Secure")) then end;
end
if true then return pairs:join(("; ")); end;
end);
parse = (function (this, str, opt)
local obj, pairs, dec = obj, pairs, dec;
opt = opt or _obj({
  });
obj = _obj({
  });
pairs = str:split(_regexp("[;,] *", ""));
dec = (opt).decode or decode;
if pairs:forEach((function (this, pair)
local eq____idx, key, val = eq____idx, key, val;
eq__idx = pair:indexOf(("="));
if (eq__idx < (0)) then
if true then return; end;
end
key = pair:substr((0), eq__idx):trim();
val = pair:substr((function () eq__idx = eq__idx + 1; return eq__idx; end)(), pair.length):trim();
if _truthy((("\"") == (val)[(0)])) then
val = val:slice((1), (-(1)));
end
if _truthy((undefined == (obj)[key])) then
local _e = nil
local _s, _r = _xpcall(function ()
(obj)[key] = dec(global, val);
    end, function (err)
        _e = err
    end)
if _s == false then
e = _e;
(obj)[key] = val;
end

end
end)) then end;
if true then return obj; end;
end);
encode = encodeURIComponent;
decode = decodeURIComponent;
((module).exports).serialize = serialize;
((module).exports).parse = parse;

return _module.exports;
end