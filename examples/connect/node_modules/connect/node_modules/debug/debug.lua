function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local debug = debug;
debug = (function (this, name)
local debug = _debug.getinfo(1, 'f').func;
if (not _truthy(debug:enabled(name))) then
if true then return (function (this)

end); end;
end
if true then return (function (this, ...)
local arguments = _arguments(...);
local fmt = ...;
local curr, ms = curr, ms;
curr = _new(Date);
ms = (curr - ((debug)[name] or curr));
(debug)[name] = curr;
fmt = ((((name
      + (" "))
      + fmt)
      + (" +")) + debug:humanize(ms));
if (window).console and (console).log and ((Function).prototype).apply:call(console.log, console, arguments) then end;
end); end;
end);
(module).exports = debug;
(debug).names = _arr({});
(debug).skips = _arr({});
(debug).enable = (function (this, name)
local split, len, i = split, len, i;
local _e = nil
local _s, _r = _xpcall(function ()
(localStorage).debug = name;
    end, function (err)
        _e = err
    end)
if _s == false then
e = _e;

end

split = name or (""):split(_regexp("[\\s,]+", ""));
len = (split).length;
i = (0);
while (i < len) do

name = (split)[i]:replace(("*"), (".*?"));
if ((name)[(0)] == ("-")) then
if (debug).skips:push(_new(RegExp, ((("^") + name:substr((1))) + ("$")))) then end;
else
if (debug).names:push(_new(RegExp, ((("^") + name) + ("$")))) then end;
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
end);
(debug).disable = (function (this)
if debug:enable(("")) then end;
end);
(debug).humanize = (function (this, ms)
local sec, min, hour = sec, min, hour;
sec = (1000);
min = ((60) * (1000));
hour = ((60) * min);
if (ms >= hour) then
if true then return ((ms / hour):toFixed((1)) + ("h")); end;
end
if (ms >= min) then
if true then return ((ms / min):toFixed((1)) + ("m")); end;
end
if (ms >= sec) then
if true then return ((_bit.bor((ms / sec), (0))) + ("s")); end;
end
if true then return (ms + ("ms")); end;
end);
(debug).enabled = (function (this, name)
local i, len = i, len;
i = (0);
len = ((debug).skips).length;
while (i < len) do

if _truthy(((debug).skips)[i]:test(name)) then
if true then return (false); end;
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
i = (0);
len = ((debug).names).length;
while (i < len) do

if _truthy(((debug).names)[i]:test(name)) then
if true then return (true); end;
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if true then return (false); end;
end);
if _truthy((window).localStorage) then
if debug:enable(localStorage.debug) then end;
end

return _module.exports;
end