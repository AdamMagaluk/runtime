function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local tty, names, skips, colors, prev, prevColor, isatty, color, humanize, debug = tty, names, skips, colors, prev, prevColor, isatty, color, humanize, debug;
color = (function (this)
local color = _debug.getinfo(1, 'f').func;
if true then return (colors)[((function () local _r = prevColor; prevColor = _r + 1; return _r end)() % (colors).length)]; end;
end);
humanize = (function (this, ms)
local humanize = _debug.getinfo(1, 'f').func;
local sec, min, hour = sec, min, hour;
sec = (1000);
min = ((60) * (1000));
hour = ((60) * min);
if (ms >= hour) then
if true then return ((ms / hour):toFixed((1)) + ("h")); end;
end
if (ms >= min) then
if true then return ((ms / min):toFixed((1)) + ("m")); end;
end
if (ms >= sec) then
if true then return ((_bit.bor((ms / sec), (0))) + ("s")); end;
end
if true then return (ms + ("ms")); end;
end);
debug = (function (this, name)
local debug = _debug.getinfo(1, 'f').func;
local disabled, match, c, colored, plain = disabled, match, c, colored, plain;
disabled = (function (this)
local disabled = _debug.getinfo(1, 'f').func;

end);
colored = (function (this, ...)
local colored = _debug.getinfo(1, 'f').func;
local arguments = _arguments(...);
local fmt = ...;
local curr, ms = curr, ms;
curr = _new(Date);
ms = (curr - ((prev)[name] or curr));
(prev)[name] = curr;
fmt = ((((((((((((((("  \x1b[9") + c) + ("m")) + name) + (" "))
      + ("\x1b[3")) + c) + ("m\x1b[90m"))
      + fmt) + ("\x1b[3")) + c) + ("m"))
      + (" +")) + humanize(global, ms)) + ("\x1b[0m"));
if (console)["error"]:apply(this, arguments) then end;
end);
plain = (function (this, ...)
local plain = _debug.getinfo(1, 'f').func;
local arguments = _arguments(...);
local fmt = ...;
fmt = ((((_new(Date):toUTCString()
      + (" ")) + name) + (" ")) + fmt);
if (console)["error"]:apply(this, arguments) then end;
end);
(disabled).enabled = (false);
match = skips:some((function (this, re)
if true then return re:test(name); end;
end));
if _truthy(match) then
if true then return disabled; end;
end
match = names:some((function (this, re)
if true then return re:test(name); end;
end));
if (not (match)) then
if true then return disabled; end;
end
c = color(global);
(colored).enabled = (function () local _r = (true); (plain).enabled = _r; return _r; end)();
if true then return (_truthy(isatty or ((process).env).DEBUG_COLORS) and {colored} or {plain})[1]; end;
end);
tty = require(global, ("tty"));
(module).exports = debug;
names = _arr({});
skips = _arr({});
if ((process).env).DEBUG or (""):split(_regexp("[\\s,]+", "")):forEach((function (this, name)
name = name:replace(("*"), (".*?"));
if ((name)[(0)] == ("-")) then
if skips:push(_new(RegExp, ((("^") + name:substr((1))) + ("$")))) then end;
else
if names:push(_new(RegExp, ((("^") + name) + ("$")))) then end;
end
end)) then end;
colors = _arr({[0]=(6), (2), (3), (4), (5), (1)});
prev = _obj({
  });
prevColor = (0);
isatty = tty:isatty((2));

return _module.exports;
end