-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

-- a duplex stream is just a stream that is both readable and writable.
-- Since JS doesn't have multiple prototypal inheritance, this class
-- prototypally inherits from Readable, and then parasitically from
-- Writable.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local util, Readable, Writable, Duplex, onend = util, Readable, Writable, Duplex, onend;
Duplex = (function (this, options)
local Duplex = _debug.getinfo(1, 'f').func;
if (not (_instanceof(this, Duplex))) then
if true then return _new(Duplex, options); end;
end
if Readable:call(this, options) then end;
if Writable:call(this, options) then end;
if _truthy(options and ((options).readable == (false))) then
(this).readable = (false);
end
if _truthy(options and ((options).writable == (false))) then
(this).writable = (false);
end
(this).allowHalfOpen = (true);
if _truthy(options and ((options).allowHalfOpen == (false))) then
(this).allowHalfOpen = (false);
end
if this:once(("end"), onend) then end;
end);
onend = (function (this)
local onend = _debug.getinfo(1, 'f').func;
if _truthy((this).allowHalfOpen or ((this)._writableState).ended) then
if true then return; end;
end
if process:nextTick((this)["end"]:bind(this)) then end;
end);
(module).exports = Duplex;
util = require(global, ("util"));
Readable = require(global, ("./_stream_readable"));
Writable = require(global, ("./_stream_writable"));
if util:inherits(Duplex, Readable) then end;
if Object:keys(Writable.prototype):forEach((function (this, method)
if (not (((Duplex).prototype)[method])) then
((Duplex).prototype)[method] = ((Writable).prototype)[method];
end
end)) then end;

return _module.exports;
end