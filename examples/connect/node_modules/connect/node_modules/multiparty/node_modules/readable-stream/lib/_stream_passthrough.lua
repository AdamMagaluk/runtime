-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

-- a passthrough stream.
-- basically just the most minimal sort of Transform stream.
-- Every written chunk gets output as-is.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Transform, util, PassThrough = Transform, util, PassThrough;
PassThrough = (function (this, options)
local PassThrough = _debug.getinfo(1, 'f').func;
if (not (_instanceof(this, PassThrough))) then
if true then return _new(PassThrough, options); end;
end
if Transform:call(this, options) then end;
end);
(module).exports = PassThrough;
Transform = require(global, ("./_stream_transform"));
util = require(global, ("util"));
if util:inherits(PassThrough, Transform) then end;
((PassThrough).prototype)._transform = (function (this, chunk, encoding, cb)
if cb(global, (null), chunk) then end;
end);

return _module.exports;
end