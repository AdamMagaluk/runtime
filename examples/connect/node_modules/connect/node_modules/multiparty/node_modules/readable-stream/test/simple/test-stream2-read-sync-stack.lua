-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, Readable, r, N, reads, onReadable, ended, onEnd = common, assert, Readable, r, N, reads, onReadable, ended, onEnd;
common = require(global, ("../common"));
assert = require(global, ("assert"));
Readable = (require(global, ("../../readable"))).Readable;
r = _new(Readable);
N = ((256) * (1024));
(process).maxTickDepth = (N + (2));
reads = (0);
(r)._read = (function (this, n)
local chunk = chunk;
chunk = (((function () local _r = reads; reads = _r + 1; return _r end)() == N) and {(null)} or {_new(Buffer, (1))})[1];
if r:push(chunk) then end;
end);
if r:on(("readable"), (function (this)
local onReadable = _debug.getinfo(1, 'f').func;
if (not ((((r)._readableState).length % (256)))) then
if (function () local base, prop = console, "error"; return base[prop](base, ("readable"), (r)._readableState.length); end)() then end;
end
if r:read((N * (2))) then end;
end)) then end;
ended = (false);
if r:on(("end"), (function (this)
local onEnd = _debug.getinfo(1, 'f').func;
ended = (true);
end)) then end;
if r:read((0)) then end;
if process:on(("exit"), (function (this)
if assert(global, ended) then end;
if console:log(("ok")) then end;
end)) then end;

return _module.exports;
end