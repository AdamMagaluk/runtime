-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, Stream, Readable, r, N, reads, rended, w, writes, buffered, drain, wended = common, assert, Stream, Readable, r, N, reads, rended, w, writes, buffered, drain, wended;
drain = (function (this)
local drain = _debug.getinfo(1, 'f').func;
if assert(global, (buffered <= (2))) then end;
buffered = (0);
if w:emit(("drain")) then end;
end);
common = require(global, ("../common"));
assert = require(global, ("assert"));
Stream = require(global, ("../../readable"));
Readable = (Stream).Readable;
r = _new(Readable);
N = (256);
reads = (0);
(r)._read = (function (this, n)
if true then return r:push((((function () reads = reads + 1; return reads; end)() == N) and {(null)} or {_new(Buffer, (1))})[1]); end;
end);
rended = (false);
if r:on(("end"), (function (this)
rended = (true);
end)) then end;
w = _new(Stream);
(w).writable = (true);
writes = (0);
buffered = (0);
(w).write = (function (this, c)
writes = writes + (c).length;
buffered = buffered + (c).length;
if process:nextTick(drain) then end;
if true then return (false); end;
end);
wended = (false);
(w)["end"] = (function (this)
wended = (true);
end);
if r:on(("readable"), (function (this)
if w:emit(("drain")) then end;
end)) then end;
if r:pipe(w) then end;
if process:on(("exit"), (function (this)
if assert(global, rended) then end;
if assert(global, wended) then end;
if (function () local base, prop = console, "error"; return base[prop](base, ("ok")); end)() then end;
end)) then end;

return _module.exports;
end