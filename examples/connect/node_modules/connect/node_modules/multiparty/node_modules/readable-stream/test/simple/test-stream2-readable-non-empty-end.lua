-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, common, Readable, len, chunks, i, test, n, thrower, bytesread, next = assert, common, Readable, len, chunks, i, test, n, thrower, bytesread, next;
thrower = (function (this)
local thrower = _debug.getinfo(1, 'f').func;
_error(_new(Error, ("this should not happen!")))
end);
next = (function (this)
local next = _debug.getinfo(1, 'f').func;
local endEmitted, r = endEmitted, r;
if test:removeListener(("end"), thrower) then end;
endEmitted = (false);
if process:on(("exit"), (function (this)
if assert(global, endEmitted, ("end should be emitted by now")) then end;
end)) then end;
if test:on(("end"), (function (this)
endEmitted = (true);
end)) then end;
r = test:read();
if assert(global, r) then end;
if assert:equal(r.length, (1)) then end;
r = test:read();
if assert:equal(r, (null)) then end;
end);
assert = require(global, ("assert"));
common = require(global, ("../common.js"));
Readable = require(global, ("../../lib/_stream_readable"));
len = (0);
chunks = _new(Array, (10));
i = (1);
while (i <= (10)) do

(chunks)[(i-(1))] = _new(Buffer, i);
len = len + i;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
test = _new(Readable);
n = (0);
(test)._read = (function (this, size)
local chunk = chunk;
chunk = (chunks)[(function () local _r = n; n = _r + 1; return _r end)()];
if setTimeout(global, (function (this)
if test:push(chunk) then end;
end)) then end;
end);
if test:on(("end"), thrower) then end;
bytesread = (0);
if test:on(("readable"), (function (this)
local b, res = b, res;
b = ((len - bytesread) - (1));
res = test:read(b);
if _truthy(res) then
bytesread = bytesread + (res).length;
if (function () local base, prop = console, "error"; return base[prop](base, ("br=%d len=%d"), bytesread, len); end)() then end;
if setTimeout(global, next) then end;
end
if test:read((0)) then end;
end)) then end;
if test:read((0)) then end;

return _module.exports;
end