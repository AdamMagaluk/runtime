-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.


function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, R, util, tests, count, test, run, TestReader = common, assert, R, util, tests, count, test, run, TestReader;
test = (function (this, name, fn)
local test = _debug.getinfo(1, 'f').func;
(function () local _r = count; count = _r + 1; return _r end)();
if tests:push(_arr({[0]=name, fn})) then end;
end);
run = (function (this)
local run = _debug.getinfo(1, 'f').func;
local next, name, fn = next, name, fn;
next = tests:shift();
if (not (next)) then
if true then return (function () local base, prop = console, "error"; return base[prop](base, ("ok")); end)(); end;
end
name = (next)[(0)];
fn = (next)[(1)];
if console:log(("# %s"), name) then end;
if fn(global, _obj({
  ["same"]=(assert).deepEqual,
  ["equal"]=(assert).equal,
  ["end"]=(function (this)
(function () local _r = count; count = _r - 1; return _r end)();
if run(global) then end;
end)})) then end;
end);
TestReader = (function (this, n, opts)
local TestReader = _debug.getinfo(1, 'f').func;
if R:call(this, opts) then end;
(this).pos = (0);
(this).len = n or (100);
end);
common = require(global, ("../common.js"));
assert = require(global, ("assert"));
R = require(global, ("../../lib/_stream_readable"));
util = require(global, ("util"));
tests = _arr({});
count = (0);
if process:on(("exit"), (function (this)
if assert:equal(count, (0)) then end;
end)) then end;
if process:nextTick(run) then end;
if util:inherits(TestReader, R) then end;
((TestReader).prototype)._read = (function (this, n)
if setTimeout(global, (function (this)
local ret = ret;
if ((this).pos >= (this).len) then
if true then return this:push((null)); end;
end
n = Math:min(n, ((this).len - (this).pos));
if (n <= (0)) then
if true then return this:push((null)); end;
end
(this).pos = (this).pos + n;
ret = _new(Buffer, n);
if ret:fill(("a")) then end;
if console:log(("this.push(ret)"), ret)

     then end;
if true then return this:push(ret); end;
end):bind(this), (1)) then end;
end);
if test(global, ("setEncoding utf8"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100));
if tr:setEncoding(("utf8")) then end;
out = _arr({});
expect = _arr({[0]=("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((10)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;
if test(global, ("setEncoding hex"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100));
if tr:setEncoding(("hex")) then end;
out = _arr({});
expect = _arr({[0]=("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((10)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;
if test(global, ("setEncoding hex with read(13)"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100));
if tr:setEncoding(("hex")) then end;
out = _arr({});
expect = _arr({[0]=("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("16161")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
if console:log(("readable once"))
     then end;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((13)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if console:log(("END"))
     then end;
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;
if test(global, ("encoding: utf8"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100), _obj({
  ["encoding"]=("utf8")}));
out = _arr({});
expect = _arr({[0]=("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa"), ("aaaaaaaaaa")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((10)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;
if test(global, ("encoding: hex"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100), _obj({
  ["encoding"]=("hex")}));
out = _arr({});
expect = _arr({[0]=("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161"), ("6161616161")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((10)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;
if test(global, ("encoding: hex with read(13)"), (function (this, t)
local tr, out, expect, flow = tr, out, expect, flow;
tr = _new(TestReader, (100), _obj({
  ["encoding"]=("hex")}));
out = _arr({});
expect = _arr({[0]=("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("1616161616161"), ("6161616161616"), ("16161")});
if tr:on(("readable"), (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = tr:read((13)); chunk = _r; return _r; end)()) do

if out:push(chunk) then end;

end
end)) then end;
if tr:on(("end"), (function (this)
if t:same(out, expect) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if tr:emit(("readable")) then end;
end)) then end;

return _module.exports;
end