-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.


function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, stream, crypto, util, TestWriter, dest, TestReader, src1, src2 = common, assert, stream, crypto, util, TestWriter, dest, TestReader, src1, src2;
TestWriter = (function (this)
local TestWriter = _debug.getinfo(1, 'f').func;
if (stream).Writable:call(this) then end;
end);
TestReader = (function (this, id)
local TestReader = _debug.getinfo(1, 'f').func;
if (stream).Readable:call(this) then end;
(this).reads = (0);
end);
common = require(global, ("../common.js"));
assert = require(global, ("assert"));
stream = require(global, ("../../readable"));
crypto = require(global, ("crypto"));
util = require(global, ("util"));
if util:inherits(TestWriter, stream.Writable) then end;
((TestWriter).prototype)._write = (function (this, buffer, encoding, callback)
if console:log(("write called")) then end;
end);
dest = _new(TestWriter);
if util:inherits(TestReader, stream.Readable) then end;
((TestReader).prototype)._read = (function (this, size)
(this).reads = (this).reads + (1);
if this:push(crypto:randomBytes(size)) then end;
end);
src1 = _new(TestReader);
src2 = _new(TestReader);
if src1:pipe(dest) then end;
if src1:once(("readable"), (function (this)
if process:nextTick((function (this)
if src2:pipe(dest) then end;
if src2:once(("readable"), (function (this)
if process:nextTick((function (this)
if src1:unpipe(dest) then end;
end)) then end;
end)) then end;
end)) then end;
end)) then end;
if process:on(("exit"), (function (this)
if assert:equal(src1.reads, (2)) then end;
if assert:equal(src2.reads, (2)) then end;
end)) then end;

return _module.exports;
end