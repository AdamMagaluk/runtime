function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Writable, util, ByteCounter = Writable, util, ByteCounter;
ByteCounter = (function (this, options)
local ByteCounter = _debug.getinfo(1, 'f').func;
if Writable:call(this, options) then end;
(this).bytes = (0);
end);
(module).exports = ByteCounter;
Writable = (require(global, ("readable-stream"))).Writable;
util = require(global, ("util"));
if util:inherits(ByteCounter, Writable) then end;
((ByteCounter).prototype)._write = (function (this, chunk, encoding, cb)
(this).bytes = (this).bytes + (chunk).length;
if this:emit(("progress")) then end;
if cb(global) then end;
end);

return _module.exports;
end