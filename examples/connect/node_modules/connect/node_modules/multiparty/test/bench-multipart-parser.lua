function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, Form, boundary, mb, buffer, callbacks, form, start, createMultipartBuffer, hijack = assert, Form, boundary, mb, buffer, callbacks, form, start, createMultipartBuffer, hijack;
createMultipartBuffer = (function (this, boundary, size)
local createMultipartBuffer = _debug.getinfo(1, 'f').func;
local head, tail, buffer = head, tail, buffer;
head = ((((("--")+boundary)+("\r\n")) +
        ("content-disposition: form-data; name=\"field1\"\r\n")) +
        ("\r\n"));
tail = ((("\r\n--")+boundary)+("--\r\n"));
buffer = _new(Buffer, size);
if buffer:write(head, ("ascii"), (0)) then end;
if buffer:write(tail, ("ascii"), ((buffer).length - (tail).length)) then end;
if true then return buffer; end;
end);
hijack = (function (this, name, fn)
local hijack = _debug.getinfo(1, 'f').func;
local oldFn = oldFn;
oldFn = (form)[name];
(form)[name] = (function (this, ...)
local arguments = _arguments(...);
if fn(global) then end;
if true then return oldFn:apply(this, arguments); end;
end);
end);
assert = require(global, ("assert"));
Form = (require(global, ("../"))).Form;
boundary = ("-----------------------------168072824752491622650073");
mb = (100);
buffer = createMultipartBuffer(global, boundary, ((mb * (1024)) * (1024)));
callbacks = _obj({
  ["partBegin"]=(-(1)),
  ["partEnd"]=(-(1)),
  ["headerField"]=(-(1)),
  ["headerValue"]=(-(1)),
  ["partData"]=(-(1)),
  ["end"]=(-(1))});
form = _new(Form, _obj({
  ["boundary"]=boundary}));
if hijack(global, ("onParseHeaderField"), (function (this)
(function () local _r = (callbacks).headerField; (callbacks).headerField = _r + 1; return _r end)();
end)) then end;
if hijack(global, ("onParseHeaderValue"), (function (this)
(function () local _r = (callbacks).headerValue; (callbacks).headerValue = _r + 1; return _r end)();
end)) then end;
if hijack(global, ("onParsePartBegin"), (function (this)
(function () local _r = (callbacks).partBegin; (callbacks).partBegin = _r + 1; return _r end)();
end)) then end;
if hijack(global, ("onParsePartData"), (function (this)
(function () local _r = (callbacks).partData; (callbacks).partData = _r + 1; return _r end)();
end)) then end;
if hijack(global, ("onParsePartEnd"), (function (this)
(function () local _r = (callbacks).partEnd; (callbacks).partEnd = _r + 1; return _r end)();
end)) then end;
if form:on(("finish"), (function (this)
(function () local _r = (callbacks)["end"]; (callbacks)["end"] = _r + 1; return _r end)();
end)) then end;
start = _new(Date);
if form:write(buffer, (function (this, err)
local duration, mbPerSec = duration, mbPerSec;
duration = (_new(Date) - start);
if assert:ifError(err) then end;
mbPerSec = (mb / ((duration / (1000)))):toFixed((2));
if console:log((mbPerSec+(" mb/sec"))) then end;
end)) then end;
if process:on(("exit"), (function (this)
local k = k;
for k in _pairs(callbacks) do
if assert:equal((0), callbacks[k], ((k+(" count off by "))+(callbacks)[k])) then end;
end
end)) then end;

return _module.exports;
end