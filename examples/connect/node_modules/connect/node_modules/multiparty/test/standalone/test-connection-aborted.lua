function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, http, net, multiparty, server = assert, http, net, multiparty, server;
assert = require(global, ("assert"));
http = require(global, ("http"));
net = require(global, ("net"));
multiparty = require(global, ("../../"));
server = http:createServer((function (this, req, res)
local form, aborted____received = form, aborted____received;
form = _new((multiparty).Form);
aborted__received = (false);
if form:on(("aborted"), (function (this)
aborted__received = (true);
end)) then end;
if form:on(("error"), (function (this)
if assert(global, aborted__received, ("Error event should follow aborted")) then end;
if server:close() then end;
end)) then end;
if form:on(("end"), (function (this)
_error(_new(Error, ("Unexpected \"end\" event")))
end)) then end;
if form:parse(req) then end;
end)):listen((0), ("localhost"), (function (this)
local client = client;
client = net:connect(server:address().port);
if client:write(((("POST / HTTP/1.1\r\n") +
    ("Content-Length: 70\r\n")) +
    ("Content-Type: multipart/form-data; boundary=foo\r\n\r\n"))) then end;
if (function () local base, prop = client, "end"; return base[prop](base); end)() then end;
end));

return _module.exports;
end