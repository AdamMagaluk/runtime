function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, multiparty, request, assert, host, index, server = http, multiparty, request, assert, host, index, server;
http = require(global, ("http"));
multiparty = require(global, ("../../"));
request = require(global, ("request"));
assert = require(global, ("assert"));
host = ("localhost");
index = _arr({[0]=("<form action=\"/\" method=\"post\" enctype=\"multipart/form-data\">"), ("  <input type=\"text\" name=\"foo\" />"), ("  <input type=\"submit\" />"), ("</form>")}):join(("\n"));
server = http:createServer((function (this, req, res)
local form = form;
if ((req).method == ("GET")) then
if res:writeHead((200), _obj({
  ["content-type"]=("text/html")})) then end;
if (function () local base, prop = res, "end"; return base[prop](base, index); end)() then end;
if true then return; end;
end
form = _new((multiparty).Form);
if form:parse(req, (function (this, err, fields, files)
if res:writeHead((200), _obj({
  ["content-type"]=("text/plain")})) then end;
if res:write(JSON:stringify(_obj({
  ["err"]=err,
  ["fields"]=fields,
  ["files"]=files}))) then end;
if (function () local base, prop = res, "end"; return base[prop](base); end)() then end;
end)) then end;
end)):listen((0), host, (function (this)
local server, url, parts, req = server, url, parts, req;
server = this;
url = (((("http:--") + host) + (":")) + (server:address()).port);
parts = _arr({[0]=_obj({
  ["Content-Disposition"]=("form-data; name=\"foo\""),
  ["body"]=("bar")})});
req = request(global, _obj({
  ["method"]=("POST"),
  ["url"]=url,
  ["multipart"]=parts}), (function (this, e, res, body)
local obj = obj;
obj = JSON:parse(body);
if assert:equal(("bar"), (obj).fields.foo) then end;
if server:close() then end;
end));
end));

return _module.exports;
end