function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

(module).exports = (function (this, obj)
local onData, onEnd, events = onData, onEnd, events;
onData = nil;
onEnd = nil;
events = _arr({});
if obj:on(("data"), (function () local _r = (function (this, data, encoding)
if events:push(_arr({[0]=("data"), data, encoding})) then end;
end); onData = _r; return _r; end)()) then end;
if obj:on(("end"), (function () local _r = (function (this, data, encoding)
if events:push(_arr({[0]=("end"), data, encoding})) then end;
end); onEnd = _r; return _r; end)()) then end;
if true then return _obj({
  ["end"]=(function (this)
if obj:removeListener(("data"), onData) then end;
if obj:removeListener(("end"), onEnd) then end;
end),
  ["resume"]=(function (this)
local i, len = i, len;
if (function () local base, prop = this, "end"; return base[prop](base); end)() then end;
i = (0);
len = (events).length;
while (i < len) do

if (obj).emit:apply(obj, events[i]) then end;

if (function () i = i + 1; return i; end)() then end;
end
end)}); end;
end);

return _module.exports;
end