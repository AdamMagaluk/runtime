function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local toString, hasOwnProperty, indexOf, isArray, objectKeys, forEach, reduce, createObject, isint, promote, parse, merge, compact, restoreProto, parseObject, parseString, stringify, stringifyString, stringifyArray, stringifyObject, set, lastBraceInKey, decode = toString, hasOwnProperty, indexOf, isArray, objectKeys, forEach, reduce, createObject, isint, promote, parse, merge, compact, restoreProto, parseObject, parseString, stringify, stringifyString, stringifyArray, stringifyObject, set, lastBraceInKey, decode;
createObject = (function (this)
local createObject = _debug.getinfo(1, 'f').func;
if true then return (_truthy((Object).create) and {Object:create((null))} or {_obj({
  })})[1]; end;
end);
promote = (function (this, parent, key)
local promote = _debug.getinfo(1, 'f').func;
local t, i = t, i;
if _truthy((((parent)[key]).length == (0))) then
if true then return (function () local _r = createObject(global); (parent)[key] = _r; return _r; end)(); end;
end
t = createObject(global);
for i in _pairs((parent)[key]) do
if _truthy(hasOwnProperty:call(parent[key], i)) then
(t)[i] = ((parent)[key])[i];
end
end
(parent)[key] = t;
if true then return t; end;
end);
parse = (function (this, parts, parent, key, val)
local parse = _debug.getinfo(1, 'f').func;
local part, obj = part, obj;
part = parts:shift();
if (not _truthy(part)) then
if _truthy(isArray(global, parent[key])) then
if (parent)[key]:push(val) then end;
else
if _truthy((("object") == _typeof((parent)[key]))) then
(parent)[key] = val;
else
if _truthy((("undefined") == _typeof((parent)[key]))) then
(parent)[key] = val;
else
(parent)[key] = _arr({[0]=(parent)[key], val});
end
end
end
else
obj = (function () local _r = (parent)[key] or _arr({}); (parent)[key] = _r; return _r; end)();
if _truthy((("]") == part)) then
if _truthy(isArray(global, obj)) then
if (("") ~= val) then
if obj:push(val) then end;
end
else
if _truthy((("object") == _typeof(obj))) then
(obj)[(objectKeys(global, obj)).length] = val;
else
obj = (function () local _r = _arr({[0]=(parent)[key], val}); (parent)[key] = _r; return _r; end)();
end
end
else
if _truthy(_bit.bnot(indexOf(global, part, ("]")))) then
part = part:substr((0), ((part).length - (1)));
if _truthy((not _truthy(isint:test(part))) and isArray(global, obj)) then
obj = promote(global, parent, key);
end
if parse(global, parts, obj, part, val) then end;
else
if _truthy((not _truthy(isint:test(part))) and isArray(global, obj)) then
obj = promote(global, parent, key);
end
if parse(global, parts, obj, part, val) then end;
end
end
end
end);
merge = (function (this, parent, key, val)
local merge = _debug.getinfo(1, 'f').func;
local parts, len, last, t, k = parts, len, last, t, k;
if _truthy(_bit.bnot(indexOf(global, key, ("]")))) then
parts = key:split(("["));
len = (parts).length;
last = (len - (1));
if parse(global, parts, parent, ("base"), val) then end;
else
if _truthy((not _truthy(isint:test(key))) and isArray(global, parent.base)) then
t = createObject(global);
for k in _pairs((parent).base) do
(t)[k] = ((parent).base)[k];
end
(parent).base = t;
end
if set(global, parent.base, key, val) then end;
end
if true then return parent; end;
end);
compact = (function (this, obj)
local compact = _debug.getinfo(1, 'f').func;
local ret, i, key = ret, i, key;
if (("object") ~= _typeof(obj)) then
if true then return obj; end;
end
if _truthy(isArray(global, obj)) then
ret = _arr({});
for i in _pairs(obj) do
if _truthy(hasOwnProperty:call(obj, i)) then
if ret:push(obj[i]) then end;
end
end
if true then return ret; end;
end
for key in _pairs(obj) do
(obj)[key] = compact(global, obj[key]);
end
if true then return obj; end;
end);
restoreProto = (function (this, obj)
local restoreProto = _debug.getinfo(1, 'f').func;
local key = key;
if (not _truthy((Object).create)) then
if true then return obj; end;
end
if _truthy(isArray(global, obj)) then
if true then return obj; end;
end
if _truthy(obj and (("object") ~= _typeof(obj))) then
if true then return obj; end;
end
for key in _pairs(obj) do
if _truthy(hasOwnProperty:call(obj, key)) then
(obj)[key] = restoreProto(global, obj[key]);
end
end
(obj).__proto__ = (Object).prototype;
if true then return obj; end;
end);
parseObject = (function (this, obj)
local parseObject = _debug.getinfo(1, 'f').func;
local ret = ret;
ret = _obj({
  ["base"]=_obj({
  })});
if forEach(global, objectKeys(global, obj), (function (this, name)
if merge(global, ret, name, obj[name]) then end;
end)) then end;
if true then return compact(global, ret.base); end;
end);
parseString = (function (this, str)
local parseString = _debug.getinfo(1, 'f').func;
local ret = ret;
ret = (reduce(global, String(global, str):split(("&")), (function (this, ret, pair)
local eql, brace, key, val = eql, brace, key, val;
eql = indexOf(global, pair, ("="));
brace = lastBraceInKey(global, pair);
key = pair:substr((0), brace or eql);
val = pair:substr(brace or eql, pair.length);
val = val:substr((indexOf(global, val, ("=")) + (1)), val.length);
if _truthy((("") == key)) then
_seq({(function () local _r = pair; key = _r; return _r; end)(), (function () local _r = (""); val = _r; return _r; end)()});
end
if _truthy((("") == key)) then
if true then return ret; end;
end
if true then return merge(global, ret, decode(global, key), decode(global, val)); end;
end), _obj({
  ["base"]=createObject(global)}))).base;
if true then return restoreProto(global, compact(global, ret)); end;
end);
stringifyString = (function (this, str, prefix)
local stringifyString = _debug.getinfo(1, 'f').func;
if (not _truthy(prefix)) then
_error(_new(TypeError, ("stringify expects an object")))
end
if true then return ((prefix + ("=")) + encodeURIComponent(global, str)); end;
end);
stringifyArray = (function (this, arr, prefix)
local stringifyArray = _debug.getinfo(1, 'f').func;
local ret, i = ret, i;
ret = _arr({});
if (not _truthy(prefix)) then
_error(_new(TypeError, ("stringify expects an object")))
end
i = (0);
while (i < (arr).length) do

if ret:push(stringify(global, arr[i], (((prefix + ("[")) + i) + ("]")))) then end;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if true then return ret:join(("&")); end;
end);
stringifyObject = (function (this, obj, prefix)
local stringifyObject = _debug.getinfo(1, 'f').func;
local ret, keys, key, i, len = ret, keys, key, i, len;
ret = _arr({});
keys = objectKeys(global, obj);
key = nil;
i = (0);
len = (keys).length;
while (i < len) do
local _c = nil; repeat
key = (keys)[i];
if _truthy((("") == key)) then
_c = _cont; break;
end
if _truthy(((null) == (obj)[key])) then
if ret:push((encodeURIComponent(global, key) + ("="))) then end;
else
if ret:push(stringify(global, obj[key], (_truthy(prefix) and {(((prefix + ("[")) + encodeURIComponent(global, key)) + ("]"))} or {encodeURIComponent(global, key)})[1])) then end;
end
until true;
if _c == _break then break end
if (function () i = i + 1; return i; end)() then end;
end
if true then return ret:join(("&")); end;
end);
set = (function (this, obj, key, val)
local set = _debug.getinfo(1, 'f').func;
local v = v;
v = (obj)[key];
if (undefined == v) then
(obj)[key] = val;
else
if _truthy(isArray(global, v)) then
if v:push(val) then end;
else
(obj)[key] = _arr({[0]=v, val});
end
end
end);
lastBraceInKey = (function (this, str)
local lastBraceInKey = _debug.getinfo(1, 'f').func;
local len, brace, c, i = len, brace, c, i;
len = (str).length;
brace = nil;
c = nil;
i = (0);
while (i < len) do

c = (str)[i];
if _truthy((("]") == c)) then
brace = (false);
end
if _truthy((("[") == c)) then
brace = (true);
end
if _truthy((("=") == c) and (not _truthy(brace))) then
if true then return i; end;
end

if (function () i = i + 1; return i; end)() then end;
end
end);
decode = (function (this, str)
local decode = _debug.getinfo(1, 'f').func;
local _e = nil
local _s, _r = _xpcall(function ()
if true then return decodeURIComponent(global, str:replace(_regexp("\\+", "g"), (" "))); end;
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if true then return str; end;
end

end);
toString = ((Object).prototype).toString;
hasOwnProperty = ((Object).prototype).hasOwnProperty;
indexOf = ((_typeof(((Array).prototype).indexOf) == ("function")) and {(function (this, arr, el)
if true then return arr:indexOf(el); end;
end)} or {(function (this, arr, el)
local i = i;
i = (0);
while (i < (arr).length) do

if ((arr)[i] == el) then
if true then return i; end;
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if true then return (-(1)); end;
end)})[1];
isArray = (Array).isArray or (function (this, arr)
if true then return (toString:call(arr) == ("[object Array]")); end;
end);
objectKeys = (Object).keys or (function (this, obj)
local ret, key = ret, key;
ret = _arr({});
for key in _pairs(obj) do
if ret:push(key) then end;
end
if true then return ret; end;
end);
forEach = ((_typeof(((Array).prototype).forEach) == ("function")) and {(function (this, arr, fn)
if true then return arr:forEach(fn); end;
end)} or {(function (this, arr, fn)
local i = i;
i = (0);
while (i < (arr).length) do

if fn(global, arr[i]) then end;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
end)})[1];
reduce = (function (this, arr, fn, initial)
local res, i = res, i;
if (_typeof((arr).reduce) == ("function")) then
if true then return arr:reduce(fn, initial); end;
end
res = initial;
i = (0);
while (i < (arr).length) do

res = fn(global, res, arr[i]);

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if true then return res; end;
end);
isint = _regexp("^[0-9]+$", "");
(exports).parse = (function (this, str)
if _truthy(((null) == str) or (("") == str)) then
if true then return _obj({
  }); end;
end
if true then return (_truthy((("object") == _typeof(str))) and {parseObject(global, str)} or {parseString(global, str)})[1]; end;
end);
stringify = (function () local _r = (function (this, obj, prefix)
if _truthy(isArray(global, obj)) then
if true then return stringifyArray(global, obj, prefix); end;
else
if _truthy((("[object Object]") == toString:call(obj))) then
if true then return stringifyObject(global, obj, prefix); end;
else
if _truthy((("string") == _typeof(obj))) then
if true then return stringifyString(global, obj, prefix); end;
else
if true then return ((prefix + ("=")) + encodeURIComponent(global, String(global, obj))); end;
end
end
end
end); (exports).stringify = _r; return _r; end)();

return _module.exports;
end