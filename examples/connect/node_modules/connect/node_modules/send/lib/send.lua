function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local debug, parseRange, Stream, mime, fresh, path, http, fs, basename, normalize, join, utils, send, SendStream = debug, parseRange, Stream, mime, fresh, path, http, fs, basename, normalize, join, utils, send, SendStream;
send = (function (this, req, path, options)
local send = _debug.getinfo(1, 'f').func;
if true then return _new(SendStream, req, path, options); end;
end);
SendStream = (function (this, req, path, options)
local SendStream = _debug.getinfo(1, 'f').func;
local self = self;
self = this;
(this).req = req;
(this).path = path;
(this).options = options or _obj({
  });
if this:maxage((0)) then end;
if this:hidden((false)) then end;
if this:index(("index.html")) then end;
end);
debug = require(global, ("debug"))(global, ("send"));
parseRange = require(global, ("range-parser"));
Stream = require(global, ("stream"));
mime = require(global, ("mime"));
fresh = require(global, ("fresh"));
path = require(global, ("path"));
http = require(global, ("http"));
fs = require(global, ("fs"));
basename = (path).basename;
normalize = (path).normalize;
join = (path).join;
utils = require(global, ("./utils"));
exports = (function () local _r = send; (module).exports = _r; return _r; end)();
(exports).mime = mime;
((SendStream).prototype).__proto__ = (Stream).prototype;
((SendStream).prototype).hidden = (function (this, val)
if debug(global, ("hidden %s"), val) then end;
(this)._hidden = val;
if true then return this; end;
end);
((SendStream).prototype).index = (function (this, path)
if debug(global, ("index %s"), path) then end;
(this)._index = path;
if true then return this; end;
end);
((SendStream).prototype).root = (function () local _r = (function (this, path)
(this)._root = normalize(global, path);
if true then return this; end;
end); ((SendStream).prototype).from = _r; return _r; end)();
((SendStream).prototype).maxage = (function (this, ms)
if _truthy((Infinity == ms)) then
ms = (((((60) * (60)) * (24)) * (365)) * (1000));
end
if debug(global, ("max-age %d"), ms) then end;
(this)._maxage = ms;
if true then return this; end;
end);
((SendStream).prototype)["error"] = (function (this, status, err)
local res, msg = res, msg;
res = (this).res;
msg = ((http).STATUS_CODES)[status];
err = err or _new(Error, msg);
(err).status = status;
if _truthy((this:listeners(("error"))).length) then
if true then return this:emit(("error"), err); end;
end
(res).statusCode = (err).status;
if (function () local base, prop = res, "end"; return base[prop](base, msg); end)() then end;
end);
((SendStream).prototype).isMalicious = (function (this)
if true then return (not _truthy((this)._root)) and _bit.bnot((this).path:indexOf((".."))); end;
end);
((SendStream).prototype).hasTrailingSlash = (function (this)
if true then return (("/") == ((this).path)[(((this).path).length - (1))]); end;
end);
((SendStream).prototype).hasLeadingDot = (function (this)
if true then return ((".") == (basename(global, this.path))[(0)]); end;
end);
((SendStream).prototype).isConditionalGET = (function (this)
if true then return (((this).req).headers)[("if-none-match")] or (((this).req).headers)[("if-modified-since")]; end;
end);
((SendStream).prototype).removeContentHeaderFields = (function (this)
local res = res;
res = (this).res;
if Object:keys(res._headers):forEach((function (this, field)
if _truthy(((0) == field:indexOf(("content")))) then
if res:removeHeader(field) then end;
end
end)) then end;
end);
((SendStream).prototype).notModified = (function (this)
local res = res;
res = (this).res;
if debug(global, ("not modified")) then end;
if this:removeContentHeaderFields() then end;
(res).statusCode = (304);
if (function () local base, prop = res, "end"; return base[prop](base); end)() then end;
end);
((SendStream).prototype).isCachable = (function (this)
local res = res;
res = (this).res;
if true then return ((res).statusCode >= (200)) and ((res).statusCode < (300)) or ((304) == (res).statusCode); end;
end);
((SendStream).prototype).onStatError = (function (this, err)
local notfound = notfound;
notfound = _arr({[0]=("ENOENT"), ("ENAMETOOLONG"), ("ENOTDIR")});
if _truthy(_bit.bnot(notfound:indexOf(err.code))) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (404), err); end)(); end;
end
if (function () local base, prop = this, "error"; return base[prop](base, (500), err); end)() then end;
end);
((SendStream).prototype).isFresh = (function (this)
if true then return fresh(global, (this).req.headers, (this).res._headers); end;
end);
((SendStream).prototype).redirect = (function (this, path)
local res = res;
if _truthy((this:listeners(("directory"))).length) then
if true then return this:emit(("directory")); end;
end
res = (this).res;
path = path + ("/");
(res).statusCode = (301);
if res:setHeader(("Location"), path) then end;
if (function () local base, prop = res, "end"; return base[prop](base, (("Redirecting to ") + utils:escape(path))); end)() then end;
end);
((SendStream).prototype).pipe = (function (this, ...)
local arguments = _arguments(...);
local res = ...;
local self, args, path, root = self, args, path, root;
self = this;
args = arguments;
path = (this).path;
root = (this)._root;
(this).res = res;
path = utils:decode(path);
if _truthy(((-(1)) == path)) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (400)); end)(); end;
end
if _truthy(_bit.bnot(path:indexOf(("\x00")))) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (400)); end)(); end;
end
if _truthy(root) then
path = normalize(global, join(global, this._root, path));
end
if _truthy(this:isMalicious()) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (403)); end)(); end;
end
if _truthy(root and ((0) ~= path:indexOf(root))) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (403)); end)(); end;
end
if _truthy((not _truthy((this)._hidden)) and this:hasLeadingDot()) then
if true then return (function () local base, prop = this, "error"; return base[prop](base, (404)); end)(); end;
end
if _truthy((this)._index and this:hasTrailingSlash()) then
path = path + (this)._index;
end
if debug(global, ("stat \"%s\""), path) then end;
if fs:stat(path, (function (this, err, stat)
if _truthy(err) then
if true then return self:onStatError(err); end;
end
if _truthy(stat:isDirectory()) then
if true then return self:redirect(self.path); end;
end
if self:emit(("file"), path, stat) then end;
if self:send(path, stat) then end;
end)) then end;
if true then return res; end;
end);
((SendStream).prototype).send = (function (this, path, stat)
local options, len, res, req, ranges, offset, bytes = options, len, res, req, ranges, offset, bytes;
options = (this).options;
len = (stat).size;
res = (this).res;
req = (this).req;
ranges = ((req).headers).range;
offset = (options).start or (0);
if this:setHeader(stat) then end;
if this:type(path) then end;
if _truthy(this:isConditionalGET() and this:isCachable() and this:isFresh()) then
if true then return this:notModified(); end;
end
len = Math:max((0), (len - offset));
if ((options)["end"] ~= undefined) then
bytes = (((options)["end"] - offset) + (1));
if (len > bytes) then
len = bytes;
end
end
if _truthy(ranges) then
ranges = parseRange(global, len, ranges);
if _truthy(((-(1)) == ranges)) then
if res:setHeader(("Content-Range"), (("bytes */") + (stat).size)) then end;
if true then return (function () local base, prop = this, "error"; return base[prop](base, (416)); end)(); end;
end
if ((-(2)) ~= ranges) then
(options).start = (offset + ((ranges)[(0)]).start);
(options)["end"] = (offset + ((ranges)[(0)])["end"]);
(res).statusCode = (206);
if res:setHeader(("Content-Range"), (((((("bytes ")
        + ((ranges)[(0)]).start)
        + ("-"))
        + ((ranges)[(0)])["end"])
        + ("/"))
        + len)) then end;
len = (((options)["end"] - (options).start) + (1));
end
end
if res:setHeader(("Content-Length"), len) then end;
if _truthy((("HEAD") == (req).method)) then
if true then return (function () local base, prop = res, "end"; return base[prop](base); end)(); end;
end
if this:stream(path, options) then end;
end);
((SendStream).prototype).stream = (function (this, path, options)
local self, res, req, stream = self, res, req, stream;
self = this;
res = (this).res;
req = (this).req;
stream = fs:createReadStream(path, options);
if this:emit(("stream"), stream) then end;
if stream:pipe(res) then end;
if req:on(("close"), (stream).destroy:bind(stream)) then end;
if stream:on(("error"), (function (this, err)
if _truthy((res)._header) then
if (function () local base, prop = console, "error"; return base[prop](base, err.stack); end)() then end;
if req:destroy() then end;
if true then return; end;
end
(err).status = (500);
if self:emit(("error"), err) then end;
end)) then end;
if stream:on(("end"), (function (this)
if self:emit(("end")) then end;
end)) then end;
end);
((SendStream).prototype).type = (function (this, path)
local res, type, charset = res, type, charset;
res = (this).res;
if _truthy(res:getHeader(("Content-Type"))) then
if true then return; end;
end
type = mime:lookup(path);
charset = (mime).charsets:lookup(type);
if debug(global, ("content-type %s"), type) then end;
if res:setHeader(("Content-Type"), (type + ((_truthy(charset) and {(("; charset=") + charset)} or {("")})[1]))) then end;
end);
((SendStream).prototype).setHeader = (function (this, stat)
local res = res;
res = (this).res;
if (not _truthy(res:getHeader(("Accept-Ranges")))) then
if res:setHeader(("Accept-Ranges"), ("bytes")) then end;
end
if (not _truthy(res:getHeader(("ETag")))) then
if res:setHeader(("ETag"), utils:etag(stat)) then end;
end
if (not _truthy(res:getHeader(("Date")))) then
if res:setHeader(("Date"), _new(Date):toUTCString()) then end;
end
if (not _truthy(res:getHeader(("Cache-Control")))) then
if res:setHeader(("Cache-Control"), (("public, max-age=") + (((this)._maxage / (1000))))) then end;
end
if (not _truthy(res:getHeader(("Last-Modified")))) then
if res:setHeader(("Last-Modified"), (stat).mtime:toUTCString()) then end;
end
end);

return _module.exports;
end