function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local path, fs, Mime, mime = path, fs, Mime, mime;
Mime = (function (this)
local Mime = _debug.getinfo(1, 'f').func;
(this).types = Object:create((null));
(this).extensions = Object:create((null));
end);
path = require(global, ("path"));
fs = require(global, ("fs"));
((Mime).prototype).define = (function (this, map)
local type, exts, i = type, exts, i;
for type in _pairs(map) do
exts = (map)[type];
i = (0);
while (i < (exts).length) do

if _truthy(((process).env).DEBUG_MIME and ((this).types)[exts]) then
if console:warn((this)._loading:replace(_regexp(".*\\/", ""), ("")), (((((("changes \"") + (exts)[i]) + ("\" extension type from ")) +
          ((this).types)[exts]) + (" to ")) + type)) then end;
end
((this).types)[(exts)[i]] = type;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if (not (((this).extensions)[type])) then
((this).extensions)[type] = (exts)[(0)];
end
end
end);
((Mime).prototype).load = (function (this, file)
local map, content, lines = map, content, lines;
(this)._loading = file;
map = _obj({
  });
content = fs:readFileSync(file, ("ascii"));
lines = content:split(_regexp("[\\r\\n]+", ""));
if lines:forEach((function (this, line)
local fields = fields;
fields = line:replace(_regexp("\\s*#.*|^\\s*|\\s*$", "g"), ("")):split(_regexp("\\s+", ""));
(map)[fields:shift()] = fields;
end)) then end;
if this:define(map) then end;
(this)._loading = (null);
end);
((Mime).prototype).lookup = (function (this, path, fallback)
local ext = ext;
ext = path:replace(_regexp(".*[\\.\\/\\\\]", ""), ("")):toLowerCase();
if true then return ((this).types)[ext] or fallback or (this).default_type; end;
end);
((Mime).prototype).extension = (function (this, mimeType)
local type = type;
type = (mimeType:match(_regexp("^\\s*([^;\\s]*)(?:;|\\s|$)", "")))[(1)]:toLowerCase();
if true then return ((this).extensions)[type]; end;
end);
mime = _new(Mime);
if mime:load(path:join(____dirname, ("types/mime.types"))) then end;
if mime:load(path:join(____dirname, ("types/node.types"))) then end;
(mime).default_type = mime:lookup(("bin"));
(mime).Mime = Mime;
(mime).charsets = _obj({
  ["lookup"]=(function (this, mimeType, fallback)
if true then return (_truthy(_regexp("^text\\/", ""):test(mimeType)) and {("UTF-8")} or {fallback})[1]; end;
end)});
(module).exports = mime;

return _module.exports;
end