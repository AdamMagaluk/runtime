function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local isHeadless, exports, module, colors, addProperty, stylize, applyTheme, x, sequencer, rainbowMap, zalgo = isHeadless, exports, module, colors, addProperty, stylize, applyTheme, x, sequencer, rainbowMap, zalgo;
stylize = (function (this, str, style)
local stylize = _debug.getinfo(1, 'f').func;
local styles = styles;
styles = nil;
if ((exports).mode == ("console")) then
styles = _obj({
  ["bold"]=_arr({[0]=("\x1b[1m"), ("\x1b[22m")}),
  ["italic"]=_arr({[0]=("\x1b[3m"), ("\x1b[23m")}),
  ["underline"]=_arr({[0]=("\x1b[4m"), ("\x1b[24m")}),
  ["inverse"]=_arr({[0]=("\x1b[7m"), ("\x1b[27m")}),
  ["strikethrough"]=_arr({[0]=("\x1b[9m"), ("\x1b[29m")}),
  ["white"]=_arr({[0]=("\x1b[37m"), ("\x1b[39m")}),
  ["grey"]=_arr({[0]=("\x1b[90m"), ("\x1b[39m")}),
  ["black"]=_arr({[0]=("\x1b[30m"), ("\x1b[39m")}),
  ["blue"]=_arr({[0]=("\x1b[34m"), ("\x1b[39m")}),
  ["cyan"]=_arr({[0]=("\x1b[36m"), ("\x1b[39m")}),
  ["green"]=_arr({[0]=("\x1b[32m"), ("\x1b[39m")}),
  ["magenta"]=_arr({[0]=("\x1b[35m"), ("\x1b[39m")}),
  ["red"]=_arr({[0]=("\x1b[31m"), ("\x1b[39m")}),
  ["yellow"]=_arr({[0]=("\x1b[33m"), ("\x1b[39m")}),
  ["whiteBG"]=_arr({[0]=("\x1b[47m"), ("\x1b[49m")}),
  ["greyBG"]=_arr({[0]=("\x1b[49;5;8m"), ("\x1b[49m")}),
  ["blackBG"]=_arr({[0]=("\x1b[40m"), ("\x1b[49m")}),
  ["blueBG"]=_arr({[0]=("\x1b[44m"), ("\x1b[49m")}),
  ["cyanBG"]=_arr({[0]=("\x1b[46m"), ("\x1b[49m")}),
  ["greenBG"]=_arr({[0]=("\x1b[42m"), ("\x1b[49m")}),
  ["magentaBG"]=_arr({[0]=("\x1b[45m"), ("\x1b[49m")}),
  ["redBG"]=_arr({[0]=("\x1b[41m"), ("\x1b[49m")}),
  ["yellowBG"]=_arr({[0]=("\x1b[43m"), ("\x1b[49m")})});
else
if ((exports).mode == ("browser")) then
styles = _obj({
  ["bold"]=_arr({[0]=("<b>"), ("</b>")}),
  ["italic"]=_arr({[0]=("<i>"), ("</i>")}),
  ["underline"]=_arr({[0]=("<u>"), ("</u>")}),
  ["inverse"]=_arr({[0]=("<span style=\"background-color:black;color:white;\">"), ("</span>")}),
  ["strikethrough"]=_arr({[0]=("<del>"), ("</del>")}),
  ["white"]=_arr({[0]=("<span style=\"color:white;\">"), ("</span>")}),
  ["grey"]=_arr({[0]=("<span style=\"color:gray;\">"), ("</span>")}),
  ["black"]=_arr({[0]=("<span style=\"color:black;\">"), ("</span>")}),
  ["blue"]=_arr({[0]=("<span style=\"color:blue;\">"), ("</span>")}),
  ["cyan"]=_arr({[0]=("<span style=\"color:cyan;\">"), ("</span>")}),
  ["green"]=_arr({[0]=("<span style=\"color:green;\">"), ("</span>")}),
  ["magenta"]=_arr({[0]=("<span style=\"color:magenta;\">"), ("</span>")}),
  ["red"]=_arr({[0]=("<span style=\"color:red;\">"), ("</span>")}),
  ["yellow"]=_arr({[0]=("<span style=\"color:yellow;\">"), ("</span>")}),
  ["whiteBG"]=_arr({[0]=("<span style=\"background-color:white;\">"), ("</span>")}),
  ["greyBG"]=_arr({[0]=("<span style=\"background-color:gray;\">"), ("</span>")}),
  ["blackBG"]=_arr({[0]=("<span style=\"background-color:black;\">"), ("</span>")}),
  ["blueBG"]=_arr({[0]=("<span style=\"background-color:blue;\">"), ("</span>")}),
  ["cyanBG"]=_arr({[0]=("<span style=\"background-color:cyan;\">"), ("</span>")}),
  ["greenBG"]=_arr({[0]=("<span style=\"background-color:green;\">"), ("</span>")}),
  ["magentaBG"]=_arr({[0]=("<span style=\"background-color:magenta;\">"), ("</span>")}),
  ["redBG"]=_arr({[0]=("<span style=\"background-color:red;\">"), ("</span>")}),
  ["yellowBG"]=_arr({[0]=("<span style=\"background-color:yellow;\">"), ("</span>")})});
else
if ((exports).mode == ("none")) then
if true then return (str + ("")); end;
else
if console:log(("unsupported mode, try \"browser\", \"console\" or \"none\"")) then end;
end
end
end
if true then return ((((styles)[style])[(0)] + str) + ((styles)[style])[(1)]); end;
end);
applyTheme = (function (this, theme)
local applyTheme = _debug.getinfo(1, 'f').func;
local stringPrototypeBlacklist = stringPrototypeBlacklist;
stringPrototypeBlacklist = _arr({[0]=("__defineGetter__"), ("__defineSetter__"), ("__lookupGetter__"), ("__lookupSetter__"), ("charAt"), ("constructor"), ("hasOwnProperty"), ("isPrototypeOf"), ("propertyIsEnumerable"), ("toLocaleString"), ("toString"), ("valueOf"), ("charCodeAt"), ("indexOf"), ("lastIndexof"), ("length"), ("localeCompare"), ("match"), ("replace"), ("search"), ("slice"), ("split"), ("substring"), ("toLocaleLowerCase"), ("toLocaleUpperCase"), ("toLowerCase"), ("toUpperCase"), ("trim"), ("trimLeft"), ("trimRight")});
if Object:keys(theme):forEach((function (this, prop)
if (stringPrototypeBlacklist:indexOf(prop) ~= (-(1))) then
if console:log((((("warn: ")).red + ((("String.prototype") + prop)).magenta) + (" is probably something you don't want to override. Ignoring style name"))) then end;
else
if (_typeof((theme)[prop]) == ("string")) then
if addProperty(global, prop, (function (this)
if true then return (function () local base, prop = exports, (theme)[prop]; return base[prop](base, this); end)(); end;
end)) then end;
else
if addProperty(global, prop, (function (this)
local ret, t = ret, t;
ret = this;
t = (0);
while (t < ((theme)[prop]).length) do

ret = (function () local base, prop = exports, ((theme)[prop])[t]; return base[prop](base, ret); end)();

if (function () local _r = t; t = _r + 1; return _r end)() then end;
end
if true then return ret; end;
end)) then end;
end
end
end)) then end;
end);
sequencer = (function (this, map)
local sequencer = _debug.getinfo(1, 'f').func;
if true then return (function (this)
local exploded, i = exploded, i;
if (not (isHeadless)) then
if true then return this:replace(_regexp("( )", ""), ("$1")); end;
end
exploded = this:split((""));
i = (0);
exploded = exploded:map(map);
if true then return exploded:join(("")); end;
end); end;
end);
zalgo = (function (this, text, options)
local zalgo = _debug.getinfo(1, 'f').func;
local soul, all, zalgo, randomNumber, is____char, heComes = soul, all, zalgo, randomNumber, is____char, heComes;
randomNumber = (function (this, range)
local randomNumber = _debug.getinfo(1, 'f').func;
local r = r;
r = Math:floor((Math:random() * range));
if true then return r; end;
end);
is__char = (function (this, character)
local is__char = _debug.getinfo(1, 'f').func;
local bool = bool;
bool = (false);
if all:filter((function (this, i)
bool = (i == character);
end)) then end;
if true then return bool; end;
end);
heComes = (function (this, text, options)
local heComes = _debug.getinfo(1, 'f').func;
local result, counts, l, arr, d, index, i = result, counts, l, arr, d, index, i;
result = ("");
counts = nil;
l = nil;
options = options or _obj({
  });
(options)[("up")] = (options)[("up")] or (true);
(options)[("mid")] = (options)[("mid")] or (true);
(options)[("down")] = (options)[("down")] or (true);
(options)[("size")] = (options)[("size")] or ("maxi");
text = text:split((""));
for l in _pairs(text) do
if _truthy(is__char(global, l)) then
_c = _cont; break;
end
result = (result + (text)[l]);
counts = _obj({
  ["up"]=0,
  ["down"]=0,
  ["mid"]=0});
repeat
local _0 = ("mini"); local _1 = ("maxi"); local _2;
local _r = (options).size;
if _r == _0 then
(counts).up = randomNumber(global, (8));
(counts).min = randomNumber(global, (2));
(counts).down = randomNumber(global, (8));
_c = _break; break;
end
if _r == _1 then
(counts).up = (randomNumber(global, (16)) + (3));
(counts).min = (randomNumber(global, (4)) + (1));
(counts).down = (randomNumber(global, (64)) + (3));
_c = _break; break;
end
(counts).up = (randomNumber(global, (8)) + (1));
(counts).mid = (randomNumber(global, (6)) / (2));
(counts).down = (randomNumber(global, (8)) + (1));
_c = _break; break;
until true
arr = _arr({[0]=("up"), ("mid"), ("down")});
for d in _pairs(arr) do
index = (arr)[d];
i = (0);
while (i <= (counts)[index]) do

if _truthy((options)[index]) then
result = (result + ((soul)[index])[randomNumber(global, (soul)[index].length)]);
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
end
end
if true then return result; end;
end);
soul = _obj({
  ["up"]=_arr({[0]=("̍"), ("̎"), ("̄"), ("̅"), ("̿"), ("̑"), ("̆"), ("̐"), ("͒"), ("͗"), ("͑"), ("̇"), ("̈"), ("̊"), ("͂"), ("̓"), ("̈"), ("͊"), ("͋"), ("͌"), ("̃"), ("̂"), ("̌"), ("͐"), ("̀"), ("́"), ("̋"), ("̏"), ("̒"), ("̓"), ("̔"), ("̽"), ("̉"), ("ͣ"), ("ͤ"), ("ͥ"), ("ͦ"), ("ͧ"), ("ͨ"), ("ͩ"), ("ͪ"), ("ͫ"), ("ͬ"), ("ͭ"), ("ͮ"), ("ͯ"), ("̾"), ("͛"), ("͆"), ("̚")}),
  ["down"]=_arr({[0]=("̖"), ("̗"), ("̘"), ("̙"), ("̜"), ("̝"), ("̞"), ("̟"), ("̠"), ("̤"), ("̥"), ("̦"), ("̩"), ("̪"), ("̫"), ("̬"), ("̭"), ("̮"), ("̯"), ("̰"), ("̱"), ("̲"), ("̳"), ("̹"), ("̺"), ("̻"), ("̼"), ("ͅ"), ("͇"), ("͈"), ("͉"), ("͍"), ("͎"), ("͓"), ("͔"), ("͕"), ("͖"), ("͙"), ("͚"), ("̣")}),
  ["mid"]=_arr({[0]=("̕"), ("̛"), ("̀"), ("́"), ("͘"), ("̡"), ("̢"), ("̧"), ("̨"), ("̴"), ("̵"), ("̶"), ("͜"), ("͝"), ("͞"), ("͟"), ("͠"), ("͢"), ("̸"), ("̷"), ("͡"), (" ҉")})});
all = _arr({}):concat(soul.up, soul.down, soul.mid);
zalgo = _obj({
  });
if true then return heComes(global, text); end;
end);
isHeadless = (false);
if (_typeof(module) ~= ("undefined")) then
isHeadless = (true);
end
if (not (isHeadless)) then
exports = _obj({
  });
module = _obj({
  });
colors = exports;
(exports).mode = ("browser");
else
(exports).mode = ("console");
end
addProperty = (function (this, color, func)
(exports)[color] = (function (this, str)
if true then return func:apply(str); end;
end);
if (function () local base, prop = (String).prototype, "__defineGetter__"; return base[prop](base, color, func); end)() then end;
end);
x = _arr({[0]=("bold"), ("underline"), ("strikethrough"), ("italic"), ("inverse"), ("grey"), ("black"), ("yellow"), ("red"), ("green"), ("blue"), ("white"), ("cyan"), ("magenta"), ("greyBG"), ("blackBG"), ("yellowBG"), ("redBG"), ("greenBG"), ("blueBG"), ("whiteBG"), ("cyanBG"), ("magentaBG")});
if x:forEach((function (this, style)
if addProperty(global, style, (function (this)
if true then return stylize(global, this, style); end;
end)) then end;
end)) then end;
rainbowMap = (function (this)
local rainbowColors = rainbowColors;
rainbowColors = _arr({[0]=("red"), ("yellow"), ("green"), ("blue"), ("magenta")});
if true then return (function (this, letter, i, exploded)
if (letter == (" ")) then
if true then return letter; end;
else
if true then return stylize(global, letter, rainbowColors[((function () local _r = i; i = _r + 1; return _r end)() % (rainbowColors).length)]); end;
end
end); end;
end)(global);
(exports).themes = _obj({
  });
(exports).addSequencer = (function (this, name, map)
if addProperty(global, name, sequencer(global, map)) then end;
end);
if exports:addSequencer(("rainbow"), rainbowMap) then end;
if exports:addSequencer(("zebra"), (function (this, letter, i, exploded)
if true then return (((i % (2)) == (0)) and {letter} or {(letter).inverse})[1]; end;
end)) then end;
(exports).setTheme = (function (this, theme)
if (_typeof(theme) == ("string")) then
local _e = nil
local _s, _r = _xpcall(function ()
((exports).themes)[theme] = require(global, theme);
if applyTheme(global, (exports).themes[theme]) then end;
if true then return ((exports).themes)[theme]; end;
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if console:log(err) then end;
if true then return err; end;
end

else
if applyTheme(global, theme) then end;
end
end);
if addProperty(global, ("stripColors"), (function (this)
if true then return (("") + this):replace(_regexp("\\x1B\\[\\d+m", "g"), ("")); end;
end)) then end;
if addProperty(global, ("zalgo"), (function (this)
if true then return zalgo(global, this); end;
end)) then end;

return _module.exports;
end