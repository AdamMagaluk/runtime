function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, colors, s, a, aE, h, stylesColors, stylesAll = assert, colors, s, a, aE, h, stylesColors, stylesAll;
a = (function (this, s, code)
local a = _debug.getinfo(1, 'f').func;
if true then return ((((("\x1b[") + code:toString()) + ("m")) + s) + ("\x1b[39m")); end;
end);
aE = (function (this, s, color, code)
local aE = _debug.getinfo(1, 'f').func;
if assert:equal(s[color], a(global, s, code)) then end;
if assert:equal(colors:color(s), a(global, s, code)) then end;
if assert:equal(s[color], colors:color(s)) then end;
if assert:equal((s)[color].stripColors, s) then end;
if assert:equal((s)[color].stripColors, colors:stripColors(s)) then end;
end);
h = (function (this, s, color)
local h = _debug.getinfo(1, 'f').func;
if true then return ((((("<span style=\"color:") + color) + (";\">")) + s) + ("</span>")); end;
end);
assert = require(global, ("assert"));
colors = require(global, ("./colors"));
s = ("string");
stylesColors = _arr({[0]=("white"), ("black"), ("blue"), ("cyan"), ("green"), ("magenta"), ("red"), ("yellow")});
stylesAll = stylesColors:concat(_arr({[0]=("bold"), ("italic"), ("underline"), ("inverse"), ("rainbow")}));
(colors).mode = ("console");
if assert:equal(s.bold, ((("\x1b[1m") + s) + ("\x1b[22m"))) then end;
if assert:equal(s.italic, ((("\x1b[3m") + s) + ("\x1b[23m"))) then end;
if assert:equal(s.underline, ((("\x1b[4m") + s) + ("\x1b[24m"))) then end;
if assert:equal(s.strikethrough, ((("\x1b[9m") + s) + ("\x1b[29m"))) then end;
if assert:equal(s.inverse, ((("\x1b[7m") + s) + ("\x1b[27m"))) then end;
if assert:ok(s.rainbow) then end;
if aE(global, s, ("white"), (37)) then end;
if aE(global, s, ("grey"), (90)) then end;
if aE(global, s, ("black"), (30)) then end;
if aE(global, s, ("blue"), (34)) then end;
if aE(global, s, ("cyan"), (36)) then end;
if aE(global, s, ("green"), (32)) then end;
if aE(global, s, ("magenta"), (35)) then end;
if aE(global, s, ("red"), (31)) then end;
if aE(global, s, ("yellow"), (33)) then end;
if assert:equal(s, ("string")) then end;
if colors:setTheme(_obj({
  ["error"]=("red")})) then end;
if assert:equal(_typeof((("astring")).red), ("string")) then end;
if assert:equal(_typeof((("astring"))["error"]), ("string")) then end;
(colors).mode = ("browser");
if assert:equal(s.bold, ((("<b>") + s) + ("</b>"))) then end;
if assert:equal(s.italic, ((("<i>") + s) + ("</i>"))) then end;
if assert:equal(s.underline, ((("<u>") + s) + ("</u>"))) then end;
if assert:equal(s.strikethrough, ((("<del>") + s) + ("</del>"))) then end;
if assert:equal(s.inverse, ((("<span style=\"background-color:black;color:white;\">") + s) + ("</span>"))) then end;
if assert:ok(s.rainbow) then end;
if stylesColors:forEach((function (this, color)
if assert:equal(s[color], h(global, s, color)) then end;
if assert:equal(colors:color(s), h(global, s, color)) then end;
end)) then end;
if assert:equal(_typeof((("astring")).red), ("string")) then end;
if assert:equal(_typeof((("astring"))["error"]), ("string")) then end;
(colors).mode = ("none");
if stylesAll:forEach((function (this, style)
if assert:equal(s[style], s) then end;
if assert:equal(colors:style(s), s) then end;
end)) then end;
if assert:equal(_typeof((("astring")).red), ("string")) then end;
if assert:equal(_typeof((("astring"))["error"]), ("string")) then end;

return _module.exports;
end