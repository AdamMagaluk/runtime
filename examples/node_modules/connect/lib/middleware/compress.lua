

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local zlib, utils, compress, getSize = zlib, utils, compress, getSize;
getSize = (function (this, chunk)
local getSize = _debug.getinfo(1, 'f').func;
if true then return (_truthy(Buffer:isBuffer(chunk)) and {(chunk).length} or {Buffer:byteLength(chunk)})[1]; end;
end);
zlib = require(global, ("zlib"));
utils = require(global, ("../utils"));
(exports).methods = _obj({
  ["gzip"]=(zlib).createGzip,
  ["deflate"]=(zlib).createDeflate});
(exports).filter = (function (this, req, res)
if true then return _regexp("json|text|javascript|dart|image\\/svg\\+xml|application\\/x-font-ttf|application\\/vnd\\.ms-opentype|application\\/vnd\\.ms-fontobject", ""):test(res:getHeader(("Content-Type"))); end;
end);
(module).exports = (function () compress = (function (this, options)
local compress = _debug.getinfo(1, 'f').func;
local names, filter, threshold, compress = names, filter, threshold, compress;
options = options or _obj({
  });
names = Object:keys(exports.methods);
filter = (options).filter or (exports).filter;
threshold = nil;
if _truthy(((false) == (options).threshold) or ((0) == (options).threshold)) then
threshold = (0)
  ;
else
if (("string") == _typeof((options).threshold)) then
threshold = utils:parseBytes(options.threshold)
  ;
else
threshold = (options).threshold or (1024)
  ;
end
end
if true then return (function () compress = (function (this, req, res, next)
local compress = _debug.getinfo(1, 'f').func;
local accept, vary, write, __K__end, compress, stream, method = accept, vary, write, __K__end, compress, stream, method;
accept = ((req).headers)[("accept-encoding")];
vary = res:getHeader(("Vary"));
write = (res).write;
_K_end = (res)["end"];
compress = (true);
stream = nil;
method = nil;
if (not (vary)) then
if res:setHeader(("Vary"), ("Accept-Encoding")) then end;
else
if (not (_bit.bnot(vary:indexOf(("Accept-Encoding"))))) then
if res:setHeader(("Vary"), (vary + (", Accept-Encoding"))) then end;
end
end
if req:on(("close"), (function (this)
(res).write = (function () local _r = (function (this)

end); (res)["end"] = _r; return _r; end)();
end)) then end;
(res).write = (function (this, chunk, encoding)
if (not ((this).headerSent)) then
if (function () local base, prop = this, "_implicitHeader"; return base[prop](base); end)() then end;
end
if true then return (_truthy(stream) and {stream:write(_new(Buffer, chunk, encoding))} or {write:call(res, chunk, encoding)})[1]; end;
end);
(res)["end"] = (function (this, chunk, encoding)
if _truthy(chunk) then
if _truthy((not ((this).headerSent)) and (getSize(global, chunk) < threshold)) then
compress = (false);
end
if this:write(chunk, encoding) then end;
else
if (not ((this).headerSent)) then
compress = (false);
end
end
if true then return (_truthy(stream) and {(function () local base, prop = stream, "end"; return base[prop](base); end)()} or {_K_end:call(res)})[1]; end;
end);
if res:on(("header"), (function (this)
local encoding, i, len = encoding, i, len;
if (not (compress)) then
if true then return; end;
end
encoding = res:getHeader(("Content-Encoding")) or ("identity");
if (("identity") ~= encoding) then
if true then return; end;
end
if (not (filter(global, req, res))) then
if true then return; end;
end
if (not (accept)) then
if true then return; end;
end
if _truthy((("HEAD") == (req).method)) then
if true then return; end;
end
if _truthy((("*") == accept:trim())) then
method = ("gzip");
end
if (not (method)) then
i = (0);
len = (names).length;
while (i < len) do

if _truthy(_bit.bnot(accept:indexOf(names[i]))) then
method = (names)[i];
_c = _break; break;
end

if (function () i = i + 1; return i; end)() then end;
end
end
if (not (method)) then
if true then return; end;
end
stream = (exports).methods:method(options);
if res:setHeader(("Content-Encoding"), method) then end;
if res:removeHeader(("Content-Length")) then end;
if stream:on(("data"), (function (this, chunk)
if write:call(res, chunk) then end;
end)) then end;
if stream:on(("end"), (function (this)
if _K_end:call(res) then end;
end)) then end;
if stream:on(("drain"), (function (this)
if res:emit(("drain")) then end;
end)) then end;
end)) then end;
if next(global) then end;
end); return compress; end)(); end;
end); return compress; end)();

return _module.exports;
end