

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, uid, crypto, csrf, defaultValue, saltedToken, createToken, checkToken, generateSalt, SALTCHARS = utils, uid, crypto, csrf, defaultValue, saltedToken, createToken, checkToken, generateSalt, SALTCHARS;
defaultValue = (function (this, req)
local defaultValue = _debug.getinfo(1, 'f').func;
if true then return (req).body and ((req).body)._csrf or (req).query and ((req).query)._csrf or ((req).headers)[("x-csrf-token")] or ((req).headers)[("x-xsrf-token")]; end;
end);
saltedToken = (function (this, secret)
local saltedToken = _debug.getinfo(1, 'f').func;
if true then return createToken(global, generateSalt(global, (10)), secret); end;
end);
createToken = (function (this, salt, secret)
local createToken = _debug.getinfo(1, 'f').func;
if true then return (salt + crypto:createHash(("sha1")):update((salt + secret)):digest(("base64"))); end;
end);
checkToken = (function (this, token, secret)
local checkToken = _debug.getinfo(1, 'f').func;
if (("string") ~= _typeof(token)) then
if true then return (false); end;
end
if true then return (token == createToken(global, token:slice((0), (10)), secret)); end;
end);
generateSalt = (function (this, length)
local generateSalt = _debug.getinfo(1, 'f').func;
local i, r = i, r;
i = nil;
r = _arr({});
(function () local _r = (0); i = _r; return _r; end)()
while (i < length) do

if r:push(SALTCHARS[Math:floor((Math:random() * (SALTCHARS).length))]) then end;

if (function () i = i + 1; return i; end)() then end;
end
if true then return r:join(("")); end;
end);
utils = require(global, ("../utils"));
uid = require(global, ("uid2"));
crypto = require(global, ("crypto"));
(module).exports = (function () csrf = (function (this, options)
local csrf = _debug.getinfo(1, 'f').func;
local value = value;
options = options or _obj({
  });
value = (options).value or defaultValue;
if true then return (function (this, req, res, next)
local secret, createToken = secret, createToken;
createToken = (function (this, secret)
local createToken = _debug.getinfo(1, 'f').func;
local token, csrfToken, val = token, csrfToken, val;
token = nil;
(req).csrfToken = (function () csrfToken = (function (this)
local csrfToken = _debug.getinfo(1, 'f').func;
if true then return token or (function () local _r = saltedToken(global, secret); token = _r; return _r; end)(); end;
end); return csrfToken; end)();
if Object:defineProperty(req.session, ("_csrf"), _obj({
  ["configurable"]=true,
  ["get"]=(function (this)
if console:warn(("req.session._csrf is deprecated, use req.csrfToken() instead")) then end;
if true then return req:csrfToken(); end;
end)})) then end;
if _truthy((("GET") == (req).method) or (("HEAD") == (req).method) or (("OPTIONS") == (req).method)) then
if true then return next(global); end;
end
val = value(global, req);
if (not (checkToken(global, val, secret))) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (403)); end)()); end;
end
if next(global) then end;
end);
secret = ((req).session)._csrfSecret;
if _truthy(secret) then
if true then return createToken(global, secret); end;
end
if uid(global, (24), (function (this, err, secret)
if _truthy(err) then
if true then return next(global, err); end;
end
((req).session)._csrfSecret = secret;
if createToken(global, secret) then end;
end)) then end;
end); end;
end); return csrf; end)();
SALTCHARS = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789");

return _module.exports;
end