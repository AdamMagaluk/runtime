-- TODO: icon / style for directories
-- TODO: arrow key navigation
-- TODO: make icons extensible



function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local fs, parse, utils, path, normalize, extname, join, cache, directory, htmlPath, html, load, removeHidden, icons = fs, parse, utils, path, normalize, extname, join, cache, directory, htmlPath, html, load, removeHidden, icons;
htmlPath = (function (this, dir)
local htmlPath = _debug.getinfo(1, 'f').func;
local curr = curr;
curr = _arr({});
if true then return dir:split(("/")):map((function (this, part)
if curr:push(part) then end;
if true then return ((((("<a href=\"") + curr:join(("/"))) + ("\">")) + part) + ("</a>")); end;
end)):join((" / ")); end;
end);
html = (function (this, files, dir, useIcons)
local html = _debug.getinfo(1, 'f').func;
if true then return ((("<ul id=\"files\">") + files:map((function (this, file)
local icon, classes = icon, classes;
icon = ("");
classes = _arr({});
if _truthy(useIcons and (("..") ~= file)) then
icon = (icons)[extname(global, file)] or (icons).default;
icon = ((("<img src=\"data:image/png;base64,") + load(global, icon)) + ("\" />"));
if classes:push(("icon")) then end;
end
if true then return ((((((((((("<li><a href=\"")
      + join(global, dir, file))
      + ("\" class=\""))
      + classes:join((" "))) + ("\""))
      + (" title=\"")) + file) + ("\">"))
      + icon) + file) + ("</a></li>")); end;
end)):join(("\n"))) + ("</ul>")); end;
end);
load = (function (this, icon)
local load = _debug.getinfo(1, 'f').func;
if _truthy((cache)[icon]) then
if true then return (cache)[icon]; end;
end
if true then return (function () local _r = fs:readFileSync(((____dirname + ("/../public/icons/")) + icon), ("base64")); (cache)[icon] = _r; return _r; end)(); end;
end);
removeHidden = (function (this, files)
local removeHidden = _debug.getinfo(1, 'f').func;
if true then return files:filter((function (this, file)
if true then return ((".") ~= (file)[(0)]); end;
end)); end;
end);
fs = require(global, ("fs"));
parse = (require(global, ("url"))).parse;
utils = require(global, ("../utils"));
path = require(global, ("path"));
normalize = (path).normalize;
extname = (path).extname;
join = (path).join;
cache = _obj({
  });
exports = (function () local _r = (function () directory = (function (this, root, options)
local directory = _debug.getinfo(1, 'f').func;
local hidden, icons, filter, root, directory = hidden, icons, filter, root, directory;
options = options or _obj({
  });
if (not (root)) then
_error(_new(Error, ("directory() root path required")))
end
hidden = (options).hidden;
icons = (options).icons;
filter = (options).filter;
root = normalize(global, root);
if true then return (function () directory = (function (this, req, res, next)
local directory = _debug.getinfo(1, 'f').func;
local accept, url, dir, path, originalUrl, originalDir, showUp = accept, url, dir, path, originalUrl, originalDir, showUp;
if _truthy((("GET") ~= (req).method) and (("HEAD") ~= (req).method)) then
if true then return next(global); end;
end
accept = ((req).headers).accept or ("text/plain");
url = parse(global, req.url);
dir = decodeURIComponent(global, url.pathname);
path = normalize(global, join(global, root, dir));
originalUrl = parse(global, req.originalUrl);
originalDir = decodeURIComponent(global, originalUrl.pathname);
showUp = (path ~= root) and (path ~= (root + ("/")));
if _truthy(_bit.bnot(path:indexOf(("\x00")))) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (400)); end)()); end;
end
if ((0) ~= path:indexOf(root)) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (403)); end)()); end;
end
if fs:stat(path, (function (this, err, stat)
if _truthy(err) then
if true then return (_truthy((("ENOENT") == (err).code)) and {next(global)} or {next(global, err)})[1]; end;
end
if (not (stat:isDirectory())) then
if true then return next(global); end;
end
if fs:readdir(path, (function (this, err, files)
local key = key;
if _truthy(err) then
if true then return next(global, err); end;
end
if (not (hidden)) then
files = removeHidden(global, files);
end
if _truthy(filter) then
files = files:filter(filter);
end
if files:sort() then end;
for key in _pairs(exports) do
if _truthy(_bit.bnot(accept:indexOf(key)) or _bit.bnot(accept:indexOf(("*/*")))) then
if exports:key(req, res, files, next, originalDir, showUp, icons) then end;
if true then return; end;
end
end
if next(global, (function () local base, prop = utils, "error"; return base[prop](base, (406)); end)()) then end;
end)) then end;
end)) then end;
end); return directory; end)(); end;
end); return directory; end)(); (module).exports = _r; return _r; end)();
(exports).html = (function (this, req, res, files, next, dir, showUp, icons)
if fs:readFile((____dirname + ("/../public/directory.html")), ("utf8"), (function (this, err, str)
if _truthy(err) then
if true then return next(global, err); end;
end
if fs:readFile((____dirname + ("/../public/style.css")), ("utf8"), (function (this, err, style)
if _truthy(err) then
if true then return next(global, err); end;
end
if _truthy(showUp) then
if files:unshift(("..")) then end;
end
str = str:replace(("{style}"), style):replace(("{files}"), html(global, files, dir, icons)):replace(("{directory}"), dir):replace(("{linked-path}"), htmlPath(global, dir));
if res:setHeader(("Content-Type"), ("text/html")) then end;
if res:setHeader(("Content-Length"), str.length) then end;
if (function () local base, prop = res, "end"; return base[prop](base, str); end)() then end;
end)) then end;
end)) then end;
end);
(exports).json = (function (this, req, res, files)
files = JSON:stringify(files);
if res:setHeader(("Content-Type"), ("application/json")) then end;
if res:setHeader(("Content-Length"), files.length) then end;
if (function () local base, prop = res, "end"; return base[prop](base, files); end)() then end;
end);
(exports).plain = (function (this, req, res, files)
files = (files:join(("\n")) + ("\n"));
if res:setHeader(("Content-Type"), ("text/plain")) then end;
if res:setHeader(("Content-Length"), files.length) then end;
if (function () local base, prop = res, "end"; return base[prop](base, files); end)() then end;
end);
icons = _obj({
  [".js"]=("page_white_code_red.png"),
  [".c"]=("page_white_c.png"),
  [".h"]=("page_white_h.png"),
  [".cc"]=("page_white_cplusplus.png"),
  [".php"]=("page_white_php.png"),
  [".rb"]=("page_white_ruby.png"),
  [".cpp"]=("page_white_cplusplus.png"),
  [".swf"]=("page_white_flash.png"),
  [".pdf"]=("page_white_acrobat.png"),
  ["default"]=("page_white.png")});

return _module.exports;
end