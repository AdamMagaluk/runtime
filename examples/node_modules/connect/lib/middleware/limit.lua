

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, brokenPause, limit = utils, brokenPause, limit;
utils = require(global, ("../utils"));
brokenPause = (utils).brokenPause;
(module).exports = (function () limit = (function (this, bytes)
local limit = _debug.getinfo(1, 'f').func;
local limit = limit;
if _truthy((("string") == _typeof(bytes))) then
bytes = utils:parseBytes(bytes);
end
if (("number") ~= _typeof(bytes)) then
_error(_new(Error, ("limit() bytes required")))
end
if true then return (function () limit = (function (this, req, res, next)
local limit = _debug.getinfo(1, 'f').func;
local received, len, handler, listen = received, len, handler, listen;
listen = (function (this)
local listen = _debug.getinfo(1, 'f').func;
if req:on(("data"), (function (this, chunk)
received = received + (_truthy(Buffer:isBuffer(chunk)) and {(chunk).length} or {Buffer:byteLength(chunk)})[1];
if (received > bytes) then
if req:destroy() then end;
end
end)) then end;
end);
received = (0);
len = (_truthy(((req).headers)[("content-length")]) and {parseInt(global, (req).headers[("content-length")], (10))} or {(null)})[1];
if _truthy((req)._limit) then
if true then return next(global); end;
end
(req)._limit = (true);
if _truthy(len and (len > bytes)) then
if true then return next(global, (function () local base, prop = utils, "error"; return base[prop](base, (413)); end)()); end;
end
if _truthy(brokenPause) then
if listen(global) then end;
else
if req:on(("newListener"), (function (this, event)
local handler = _debug.getinfo(1, 'f').func;
if (event ~= ("data")) then
if true then return; end;
end
if req:removeListener(("newListener"), handler) then end;
if process:nextTick(listen) then end;
end)) then end;
end
;
if next(global) then end;
end); return limit; end)(); end;
end); return limit; end)();

return _module.exports;
end