

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local methods, methodOverride, supports = methods, methodOverride, supports;
supports = (function (this, method)
local supports = _debug.getinfo(1, 'f').func;
if true then return _bit.bnot(methods:indexOf(method)); end;
end);
methods = require(global, ("methods"));
(module).exports = (function () methodOverride = (function (this, key)
local methodOverride = _debug.getinfo(1, 'f').func;
local methodOverride = methodOverride;
key = key or ("_method");
if true then return (function () methodOverride = (function (this, req, res, next)
local methodOverride = _debug.getinfo(1, 'f').func;
local method = method;
method = nil;
(req).originalMethod = (req).originalMethod or (req).method;
if _truthy((req).body and _in(key, (req).body)) then
method = ((req).body)[key]:toLowerCase();
((req).body)[key] = nil;
end
if _truthy(((req).headers)[("x-http-method-override")]) then
method = ((req).headers)[("x-http-method-override")]:toLowerCase();
end
if _truthy(supports(global, method)) then
(req).method = method:toUpperCase();
end
if next(global) then end;
end); return methodOverride; end)(); end;
end); return methodOverride; end)();

return _module.exports;
end