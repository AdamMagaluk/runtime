

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, crypto, parse, signature, nodeVersion, noop = http, crypto, parse, signature, nodeVersion, noop;
noop = (function (this)
local noop = _debug.getinfo(1, 'f').func;

end);
http = require(global, ("http"));
crypto = require(global, ("crypto"));
parse = (require(global, ("url"))).parse;
signature = require(global, ("cookie-signature"));
nodeVersion = ((process).versions).node:split(("."));
(exports).brokenPause = (parseInt(global, nodeVersion[(0)], (10)) == (0)) and (parseInt(global, nodeVersion[(1)], (10)) < (10));
(exports).hasBody = (function (this, req)
local encoding, length = encoding, length;
encoding = _in(("transfer-encoding"), (req).headers);
length = _in(("content-length"), (req).headers) and (((req).headers)[("content-length")] ~= ("0"));
if true then return encoding or length; end;
end);
(exports).mime = (function (this, req)
local str = str;
str = ((req).headers)[("content-type")] or ("");
if true then return (str:split((";")))[(0)]; end;
end);
(exports)["error"] = (function (this, code, msg)
local err = err;
err = _new(Error, msg or ((http).STATUS_CODES)[code]);
(err).status = code;
if true then return err; end;
end);
(exports).md5 = (function (this, str, encoding)
if true then return crypto:createHash(("md5")):update(str):digest(encoding or ("hex")); end;
end);
(exports).merge = (function (this, a, b)
local key = key;
if _truthy(a and b) then
for key in _pairs(b) do
(a)[key] = (b)[key];
end
end
if true then return a; end;
end);
(exports).escape = (function (this, html)
if true then return String(global, html):replace(_regexp("&(?!\\w+;)", "g"), ("&amp;")):replace(_regexp("<", "g"), ("&lt;")):replace(_regexp(">", "g"), ("&gt;")):replace(_regexp("\"", "g"), ("&quot;")); end;
end);
(exports).sign = (function (this, val, secret)
if console:warn(("do not use utils.sign(), use https:--github.com/visionmedia/node-cookie-signature"))
   then end;
if true then return ((val + (".")) + crypto:createHmac(("sha256"), secret):update(val):digest(("base64")):replace(_regexp("=+$", ""), (""))); end;
end);
(exports).unsign = (function (this, val, secret)
local str = str;
if console:warn(("do not use utils.unsign(), use https:--github.com/visionmedia/node-cookie-signature"))
   then end;
str = val:slice((0), val:lastIndexOf((".")));
if true then return (_truthy((exports:sign(str, secret) == val)) and {str} or {(false)})[1]; end;
end);
(exports).parseSignedCookies = (function (this, obj, secret)
local ret = ret;
ret = _obj({
  });
if Object:keys(obj):forEach((function (this, key)
local val = val;
val = (obj)[key];
if _truthy(((0) == val:indexOf(("s:")))) then
val = signature:unsign(val:slice((2)), secret);
if _truthy(val) then
(ret)[key] = val;
(obj)[key] = nil;
end
end
end)) then end;
if true then return ret; end;
end);
(exports).parseSignedCookie = (function (this, str, secret)
if true then return (_truthy(((0) == str:indexOf(("s:")))) and {signature:unsign(str:slice((2)), secret)} or {str})[1]; end;
end);
(exports).parseJSONCookies = (function (this, obj)
if Object:keys(obj):forEach((function (this, key)
local val, res = val, res;
val = (obj)[key];
res = exports:parseJSONCookie(val);
if _truthy(res) then
(obj)[key] = res;
end
end)) then end;
if true then return obj; end;
end);
(exports).parseJSONCookie = (function (this, str)
if _truthy(((0) == str:indexOf(("j:")))) then
local _e = nil
local _s, _r = _xpcall(function ()
if true then return JSON:parse(str:slice((2))); end;
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;

end

end
end);
(exports).pause = (_truthy((exports).brokenPause) and {require(global, ("pause"))} or {(function (this)
if true then return _obj({
  ["end"]=noop,
  ["resume"]=noop}); end;
end)})[1]



;
(exports).removeContentHeaders = (function (this, res)
if Object:keys(res._headers):forEach((function (this, field)
if _truthy(((0) == field:indexOf(("content")))) then
if res:removeHeader(field) then end;
end
end)) then end;
end);
(exports).conditionalGET = (function (this, req)
if true then return ((req).headers)[("if-modified-since")] or ((req).headers)[("if-none-match")]; end;
end);
(exports).unauthorized = (function (this, res, realm)
(res).statusCode = (401);
if res:setHeader(("WWW-Authenticate"), ((("Basic realm=\"") + realm) + ("\""))) then end;
if (function () local base, prop = res, "end"; return base[prop](base, ("Unauthorized")); end)() then end;
end);
(exports).notModified = (function (this, res)
if exports:removeContentHeaders(res) then end;
(res).statusCode = (304);
if (function () local base, prop = res, "end"; return base[prop](base); end)() then end;
end);
(exports).etag = (function (this, stat)
if true then return ((((("\"") + (stat).size) + ("-")) + Number(global, stat.mtime)) + ("\"")); end;
end);
(exports).parseCacheControl = (function (this, str)
local directives, obj, i, len, parts, key, val = directives, obj, i, len, parts, key, val;
directives = str:split((","));
obj = _obj({
  });
i = (0);
len = (directives).length;
while (i < len) do

parts = (directives)[i]:split(("="));
key = parts:shift():trim();
val = parseInt(global, parts:shift(), (10));
(obj)[key] = (_truthy(isNaN(global, val)) and {(true)} or {val})[1];

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if true then return obj; end;
end);
(exports).parseUrl = (function (this, req)
local parsed = parsed;
parsed = (req)._parsedUrl;
if _truthy(parsed and ((parsed).href == (req).url)) then
if true then return parsed; end;
else
if true then return (function () local _r = parse(global, req.url); (req)._parsedUrl = _r; return _r; end)(); end;
end
end);
(exports).parseBytes = require(global, ("bytes"));

return _module.exports;
end