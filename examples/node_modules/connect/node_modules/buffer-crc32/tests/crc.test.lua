function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local crc32, test = crc32, test;
crc32 = require(global, (".."));
test = (require(global, ("tap"))).test;
if test(global, ("simple crc32 is no problem"), (function (this, t)
local input, expected = input, expected;
input = Buffer(global, ("hey sup bros"));
expected = Buffer(global, _arr({[0]=(71), (250), (85), (112)}));
if t:same(crc32(global, input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("another simple one"), (function (this, t)
local input, expected = input, expected;
input = Buffer(global, ("IEND"));
expected = Buffer(global, _arr({[0]=(174), (66), (96), (130)}));
if t:same(crc32(global, input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("slightly more complex"), (function (this, t)
local input, expected = input, expected;
input = Buffer(global, _arr({[0]=(0), (0), (0)}));
expected = Buffer(global, _arr({[0]=(255), (65), (217), (18)}));
if t:same(crc32(global, input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("complex crc32 gets calculated like a champ"), (function (this, t)
local input, expected = input, expected;
input = Buffer(global, ("शीर्षक"));
expected = Buffer(global, _arr({[0]=(23), (184), (175), (241)}));
if t:same(crc32(global, input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("casts to buffer if necessary"), (function (this, t)
local input, expected = input, expected;
input = ("शीर्षक");
expected = Buffer(global, _arr({[0]=(23), (184), (175), (241)}));
if t:same(crc32(global, input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("can do signed"), (function (this, t)
local input, expected = input, expected;
input = ("ham sandwich");
expected = (-(1891873021));
if t:same(crc32:signed(input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("can do unsigned"), (function (this, t)
local input, expected = input, expected;
input = ("bear sandwich");
expected = (3711466352);
if t:same(crc32:unsigned(input), expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("simple crc32 in append mode"), (function (this, t)
local input, expected, crc, i = input, expected, crc, i;
input = _arr({[0]=Buffer(global, ("hey")), Buffer(global, (" ")), Buffer(global, ("sup")), Buffer(global, (" ")), Buffer(global, ("bros"))});
expected = Buffer(global, _arr({[0]=(71), (250), (85), (112)}));
crc = (0);
i = (0);
while (i < (input).length) do

crc = crc32(global, input[i], crc);

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if t:same(crc, expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("can do signed in append mode"), (function (this, t)
local input1, input2, input3, expected, crc = input1, input2, input3, expected, crc;
input1 = ("ham");
input2 = (" ");
input3 = ("sandwich");
expected = (-(1891873021));
crc = crc32:signed(input1);
crc = crc32:signed(input2, crc);
crc = crc32:signed(input3, crc);
if t:same(crc, expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("can do unsigned in append mode"), (function (this, t)
local input1, input2, expected, crc = input1, input2, expected, crc;
input1 = ("bear san");
input2 = ("dwich");
expected = (3711466352);
crc = crc32:unsigned(input1);
crc = crc32:unsigned(input2, crc);
if t:same(crc, expected) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;

return _module.exports;
end