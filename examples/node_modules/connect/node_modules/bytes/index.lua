function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local convert = convert;
convert = (function (this, b)
local convert = _debug.getinfo(1, 'f').func;
local gb, mb, kb = gb, mb, kb;
gb = _bit.lshift((1), (30));
mb = _bit.lshift((1), (20));
kb = _bit.lshift((1), (10));
if (b >= gb) then
if true then return (((Math:round(((b / gb) * (100))) / (100))) + ("gb")); end;
end
if (b >= mb) then
if true then return (((Math:round(((b / mb) * (100))) / (100))) + ("mb")); end;
end
if (b >= kb) then
if true then return (((Math:round(((b / kb) * (100))) / (100))) + ("kb")); end;
end
if true then return (b + ("b")); end;
end);
(module).exports = (function (this, size)
local parts, n, type, map = parts, n, type, map;
if _truthy((("number") == _typeof(size))) then
if true then return convert(global, size); end;
end
parts = size:match(_regexp("^(\\d+(?:\\.\\d+)?) *(kb|mb|gb)$", ""));
n = parseFloat(global, parts[(1)]);
type = (parts)[(2)];
map = _obj({
  ["kb"]=_bit.lshift((1), (10)),
  ["mb"]=_bit.lshift((1), (20)),
  ["gb"]=_bit.lshift((1), (30))});
if true then return ((map)[type] * n); end;
end);

return _module.exports;
end