function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local fresh = fresh;
fresh = (function (this, req, res)
local fresh = _debug.getinfo(1, 'f').func;
local etagMatches, notModified, modifiedSince, noneMatch, lastModified, etag, cc = etagMatches, notModified, modifiedSince, noneMatch, lastModified, etag, cc;
etagMatches = (true);
notModified = (true);
modifiedSince = (req)[("if-modified-since")];
noneMatch = (req)[("if-none-match")];
lastModified = (res)[("last-modified")];
etag = (res)[("etag")];
cc = (req)[("cache-control")];
if _truthy((not (modifiedSince)) and (not (noneMatch))) then
if true then return (false); end;
end
if _truthy(cc and (cc:indexOf(("no-cache")) ~= (-(1)))) then
if true then return (false); end;
end
if _truthy(noneMatch) then
noneMatch = noneMatch:split(_regexp(" *, *", ""));
end
if _truthy(noneMatch) then
etagMatches = _bit.bnot(noneMatch:indexOf(etag)) or (("*") == (noneMatch)[(0)]);
end
if _truthy(modifiedSince) then
modifiedSince = _new(Date, modifiedSince);
lastModified = _new(Date, lastModified);
notModified = (lastModified <= modifiedSince);
end
if true then return (not ((not (etagMatches and notModified)))); end;
end);
(module).exports = fresh;

return _module.exports;
end