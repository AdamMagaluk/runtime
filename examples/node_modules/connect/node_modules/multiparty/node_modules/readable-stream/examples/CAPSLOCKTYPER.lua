function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Transform, inherits, MyStream, s = Transform, inherits, MyStream, s;
MyStream = (function (this)
local MyStream = _debug.getinfo(1, 'f').func;
if Transform:call(this, _obj({
  ["lowWaterMark"]=0,
  ["encoding"]=("utf8")})) then end;
end);
Transform = require(global, ("../transform"));
inherits = (require(global, ("util"))).inherits;
if inherits(global, MyStream, Transform) then end;
((MyStream).prototype)._transform = (function (this, chunk, outputFn, callback)
if outputFn(global, _new(Buffer, String(global, chunk):toUpperCase())) then end;
if callback(global) then end;
end);
s = _new(MyStream);
if (process).stdin:resume() then end;
if (process).stdin:pipe(s):pipe(process.stdout) then end;
if _truthy(((process).stdin).setRawMode) then
if (process).stdin:setRawMode((true)) then end;
end
if (process).stdin:on(("data"), (function (this, c)
c = c:toString();
if _truthy((c == ("\x03")) or (c == ("\x04"))) then
if (process).stdin:pause() then end;
if (function () local base, prop = s, "end"; return base[prop](base); end)() then end;
end
if (c == ("\r")) then
if (process).stdout:write(("\n")) then end;
end
end)) then end;

return _module.exports;
end