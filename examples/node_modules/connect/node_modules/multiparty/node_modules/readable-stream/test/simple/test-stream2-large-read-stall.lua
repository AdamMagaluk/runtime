-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, READSIZE, PUSHSIZE, PUSHCOUNT, HWM, Readable, r, rs, endEmitted, pushes, push, ret = common, assert, READSIZE, PUSHSIZE, PUSHCOUNT, HWM, Readable, r, rs, endEmitted, pushes, push, ret;
push = (function (this)
local push = _debug.getinfo(1, 'f').func;
if (pushes > PUSHCOUNT) then
if true then return; end;
end
if ((function () local _r = pushes; pushes = _r + 1; return _r end)() == PUSHCOUNT) then
if (function () local base, prop = console, "error"; return base[prop](base, ("   push(EOF)")); end)() then end;
if true then return r:push((null)); end;
end
if (function () local base, prop = console, "error"; return base[prop](base, ("   push #%d"), pushes); end)() then end;
if _truthy(r:push(_new(Buffer, PUSHSIZE))) then
if setTimeout(global, push) then end;
end
end);
common = require(global, ("../common.js"));
assert = require(global, ("assert"));
READSIZE = (100);
PUSHSIZE = (20);
PUSHCOUNT = (1000);
HWM = (50);
Readable = (require(global, ("../../readable"))).Readable;
r = _new(Readable, _obj({
  ["highWaterMark"]=HWM}));
rs = (r)._readableState;
(r)._read = push;
if r:on(("readable"), (function (this)
local ret = ret;
if (function () local base, prop = console, "error"; return base[prop](base, (">> readable")); end)() then end;
repeat

if (function () local base, prop = console, "error"; return base[prop](base, ("  > read(%d)"), READSIZE); end)() then end;
ret = r:read(READSIZE);
if (function () local base, prop = console, "error"; return base[prop](base, ("  < %j (%d remain)"), ret and (ret).length, rs.length); end)() then end;

until not _truthy(ret and ((ret).length == READSIZE));
if (function () local base, prop = console, "error"; return base[prop](base, ("<< after read()"), ret and (ret).length, rs.needReadable, rs.length); end)() then end;
end)) then end;
endEmitted = (false);
if r:on(("end"), (function (this)
endEmitted = (true);
if (function () local base, prop = console, "error"; return base[prop](base, ("end")); end)() then end;
end)) then end;
pushes = (0);
ret = r:read((0));
if process:on(("exit"), (function (this)
if assert:equal(pushes, (PUSHCOUNT + (1))) then end;
if assert(global, endEmitted) then end;
end)) then end;

return _module.exports;
end