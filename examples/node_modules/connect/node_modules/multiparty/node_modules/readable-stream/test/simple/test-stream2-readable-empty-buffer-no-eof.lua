-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, Readable, test1, test2 = common, assert, Readable, test1, test2;
test1 = (function (this)
local test1 = _debug.getinfo(1, 'f').func;
local r, buf, reads, results, flow = r, buf, reads, results, flow;
flow = (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = r:read(); chunk = _r; return _r; end)()) do

if results:push((chunk + (""))) then end;

end
end);
r = _new(Readable);
buf = _new(Buffer, (5));
if buf:fill(("x")) then end;
reads = (5);
(r)._read = (function (this, n)
repeat
local _0 = (0); local _1 = (1); local _2 = (2); local _3 = (3); local _4 = (4); local _5 = (5); local _6;
local _r = (function () local _r = reads; reads = _r - 1; return _r end)();
if _r == _0 then
if true then return r:push((null)); end;
_r = _1;
end
if _r == _1 then
if true then return r:push(buf); end;
_r = _2;
end
if _r == _2 then
if setTimeout(global, (r).read:bind(r, (0)), (10)) then end;
if true then return r:push(_new(Buffer, (0))); end;
_r = _3;
end
if _r == _3 then
if setTimeout(global, (r).read:bind(r, (0)), (10)) then end;
if true then return process:nextTick((function (this)
if true then return r:push(_new(Buffer, (0))); end;
end)); end;
_r = _4;
end
if _r == _4 then
if setTimeout(global, (r).read:bind(r, (0)), (10)) then end;
if true then return setTimeout(global, (function (this)
if true then return r:push(_new(Buffer, (0))); end;
end)); end;
_r = _5;
end
if _r == _5 then
if true then return setTimeout(global, (function (this)
if true then return r:push(buf); end;
end)); end;
_r = _6;
end
_error(_new(Error, ("unreachable")))
until true
end);
results = _arr({});
if r:on(("readable"), flow) then end;
if r:on(("end"), (function (this)
if results:push(("EOF")) then end;
end)) then end;
if flow(global) then end;
if process:on(("exit"), (function (this)
if assert:deepEqual(results, _arr({[0]=("xxxxx"), ("xxxxx"), ("EOF")})) then end;
if console:log(("ok")) then end;
end)) then end;
end);
test2 = (function (this)
local test2 = _debug.getinfo(1, 'f').func;
local r, reads, results, flow = r, reads, results, flow;
flow = (function (this)
local flow = _debug.getinfo(1, 'f').func;
local chunk = chunk;
chunk = nil;
while ((null) ~= (function () local _r = r:read(); chunk = _r; return _r; end)()) do

if results:push((chunk + (""))) then end;

end
end);
r = _new(Readable, _obj({
  ["encoding"]=("base64")}));
reads = (5);
(r)._read = (function (this, n)
if (not ((function () local _r = reads; reads = _r - 1; return _r end)())) then
if true then return r:push((null)); end;
else
if true then return r:push(_new(Buffer, ("x"))); end;
end
end);
results = _arr({});
if r:on(("readable"), flow) then end;
if r:on(("end"), (function (this)
if results:push(("EOF")) then end;
end)) then end;
if flow(global) then end;
if process:on(("exit"), (function (this)
if assert:deepEqual(results, _arr({[0]=("eHh4"), ("eHg="), ("EOF")})) then end;
if console:log(("ok")) then end;
end)) then end;
end);
common = require(global, ("../common"));
assert = require(global, ("assert"));
Readable = (require(global, ("../../readable"))).Readable;
if test1(global) then end;
if (not (_regexp("^v0\\.[0-8]\\.", ""):test(process.version))) then
if test2(global) then end;
end

return _module.exports;
end