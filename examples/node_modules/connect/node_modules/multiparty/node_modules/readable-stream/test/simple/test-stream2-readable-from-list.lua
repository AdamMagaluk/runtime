-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, common, fromList, tests, count, test, run = assert, common, fromList, tests, count, test, run;
test = (function (this, name, fn)
local test = _debug.getinfo(1, 'f').func;
(function () local _r = count; count = _r + 1; return _r end)();
if tests:push(_arr({[0]=name, fn})) then end;
end);
run = (function (this)
local run = _debug.getinfo(1, 'f').func;
local next, name, fn = next, name, fn;
next = tests:shift();
if (not (next)) then
if true then return (function () local base, prop = console, "error"; return base[prop](base, ("ok")); end)(); end;
end
name = (next)[(0)];
fn = (next)[(1)];
if console:log(("# %s"), name) then end;
if fn(global, _obj({
  ["same"]=(assert).deepEqual,
  ["equal"]=(assert).equal,
  ["end"]=(function (this)
(function () local _r = count; count = _r - 1; return _r end)();
if run(global) then end;
end)})) then end;
end);
assert = require(global, ("assert"));
common = require(global, ("../common.js"));
fromList = (require(global, ("../../lib/_stream_readable")))._fromList;
tests = _arr({});
count = (0);
if process:on(("exit"), (function (this)
if assert:equal(count, (0)) then end;
end)) then end;
if process:nextTick(run) then end;
if test(global, ("buffers"), (function (this, t)
local len, list, ret = len, list, ret;
len = (16);
list = _arr({[0]=_new(Buffer, ("foog")), _new(Buffer, ("bark")), _new(Buffer, ("bazy")), _new(Buffer, ("kuel"))});
ret = fromList(global, (6), _obj({
  ["buffer"]=list,
  ["length"]=16}));
if t:equal(ret:toString(), ("foogba")) then end;
ret = fromList(global, (2), _obj({
  ["buffer"]=list,
  ["length"]=10}));
if t:equal(ret:toString(), ("rk")) then end;
ret = fromList(global, (2), _obj({
  ["buffer"]=list,
  ["length"]=8}));
if t:equal(ret:toString(), ("ba")) then end;
ret = fromList(global, (100), _obj({
  ["buffer"]=list,
  ["length"]=6}));
if t:equal(ret:toString(), ("zykuel")) then end;
if t:same(list, _arr({})) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
if test(global, ("strings"), (function (this, t)
local len, list, ret = len, list, ret;
len = (16);
list = _arr({[0]=("foog"), ("bark"), ("bazy"), ("kuel")});
ret = fromList(global, (6), _obj({
  ["buffer"]=list,
  ["length"]=16,
  ["decoder"]=true}));
if t:equal(ret, ("foogba")) then end;
ret = fromList(global, (2), _obj({
  ["buffer"]=list,
  ["length"]=10,
  ["decoder"]=true}));
if t:equal(ret, ("rk")) then end;
ret = fromList(global, (2), _obj({
  ["buffer"]=list,
  ["length"]=8,
  ["decoder"]=true}));
if t:equal(ret, ("ba")) then end;
ret = fromList(global, (100), _obj({
  ["buffer"]=list,
  ["length"]=6,
  ["decoder"]=true}));
if t:equal(ret, ("zykuel")) then end;
if t:same(list, _arr({})) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;

return _module.exports;
end