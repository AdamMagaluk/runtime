function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

(module).exports = (function (this, size, str)
local valid, i, arr = valid, i, arr;
valid = (true);
i = str:indexOf(("="));
if _truthy(((-(1)) == i)) then
if true then return (-(2)); end;
end
arr = str:slice((i + (1))):split((",")):map((function (this, range)
local range, start, __K__end = range, start, __K__end;
range = range:split(("-"));
start = parseInt(global, range[(0)], (10));
_K_end = parseInt(global, range[(1)], (10));
if _truthy(isNaN(global, start)) then
start = (size - _K_end);
_K_end = (size - (1));
else
if _truthy(isNaN(global, _K_end)) then
_K_end = (size - (1));
end
end
if (_K_end > (size - (1))) then
_K_end = (size - (1));
end
if _truthy(isNaN(global, start) or isNaN(global, _K_end) or (start > _K_end) or (start < (0))) then
valid = (false);
end
if true then return _obj({
  ["start"]=start,
  ["end"]=_K_end}); end;
end));
(arr).type = str:slice((0), i);
if true then return (_truthy(valid) and {arr} or {(-(1))})[1]; end;
end);

return _module.exports;
end