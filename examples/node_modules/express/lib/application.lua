function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local connect, Router, methods, middleware, debug, locals, View, utils, path, http, join, app = connect, Router, methods, middleware, debug, locals, View, utils, path, http, join, app;
connect = require(global, ("connect"));
Router = require(global, ("./router"));
methods = require(global, ("methods"));
middleware = require(global, ("./middleware"));
debug = require(global, ("debug"))(global, ("express:application"));
locals = (require(global, ("./utils"))).locals;
View = require(global, ("./view"));
utils = (connect).utils;
path = require(global, ("path"));
http = require(global, ("http"));
join = (path).join;
app = (function () local _r = (function () local _r = _obj({
  }); (module).exports = _r; return _r; end)(); exports = _r; return _r; end)();
(app).init = (function (this)
(this).cache = _obj({
  });
(this).settings = _obj({
  });
(this).engines = _obj({
  });
if this:defaultConfiguration() then end;
end);
(app).defaultConfiguration = (function (this)
if this:enable(("x-powered-by")) then end;
if this:enable(("etag")) then end;
if this:set(("env"), ((process).env).NODE_ENV or ("development")) then end;
if this:set(("subdomain offset"), (2)) then end;
if debug(global, ("booting in %s mode"), this:get(("env"))) then end;
if this:use(connect:query()) then end;
if this:use(middleware:init(this)) then end;
if this:on(("mount"), (function (this, parent)
((this).request).__proto__ = (parent).request;
((this).response).__proto__ = (parent).response;
((this).engines).__proto__ = (parent).engines;
((this).settings).__proto__ = (parent).settings;
end)) then end;
(this)._router = _new(Router, this);
(this).routes = ((this)._router).map;
if (function () local base, prop = this, "__defineGetter__"; return base[prop](base, ("router"), (function (this)
(this)._usedRouter = (true);
((this)._router).caseSensitive = this:enabled(("case sensitive routing"));
((this)._router).strict = this:enabled(("strict routing"));
if true then return ((this)._router).middleware; end;
end)); end)() then end;
(this).locals = locals(global, this);
((this).locals).settings = (this).settings;
if this:set(("view"), View) then end;
if this:set(("views"), (process:cwd() + ("/views"))) then end;
if this:set(("jsonp callback name"), ("callback")) then end;
if this:configure(("development"), (function (this)
if this:set(("json spaces"), (2)) then end;
end)) then end;
if this:configure(("production"), (function (this)
if this:enable(("view cache")) then end;
end)) then end;
end);
(app).use = (function (this, route, fn)
local app = app;
app = nil;
if (("string") ~= _typeof(route)) then
_seq({(function () local _r = route; fn = _r; return _r; end)(), (function () local _r = ("/"); route = _r; return _r; end)()});
end
if _truthy((fn).handle and (fn).set) then
app = fn;
end
if _truthy(app) then
(app).route = route;
fn = (function (this, req, res, next)
local orig = orig;
orig = (req).app;
if app:handle(req, res, (function (this, err)
(req).__proto__ = (orig).request;
(res).__proto__ = (orig).response;
if next(global, err) then end;
end)) then end;
end);
end
if ((connect).proto).use:call(this, route, fn) then end;
if _truthy(app) then
(app).parent = this;
if app:emit(("mount"), this) then end;
end
if true then return this; end;
end);
(app).engine = (function (this, ext, fn)
if (("function") ~= _typeof(fn)) then
_error(_new(Error, ("callback function required")))
end
if ((".") ~= (ext)[(0)]) then
ext = ((".") + ext);
end
((this).engines)[ext] = fn;
if true then return this; end;
end);
(app).param = (function (this, ...)
local arguments = _arguments(...);
local name, fn = ...;
local self, fns = self, fns;
self = this;
fns = (_arr({})).slice:call(arguments, (1));
if _truthy(Array:isArray(name)) then
if name:forEach((function (this, name)
if fns:forEach((function (this, fn)
if self:param(name, fn) then end;
end)) then end;
end)) then end;
else
if _truthy((("function") == _typeof(name))) then
if (this)._router:param(name) then end;
else
if _truthy(((":") == (name)[(0)])) then
name = name:substr((1));
end
if fns:forEach((function (this, fn)
if (self)._router:param(name, fn) then end;
end)) then end;
end
end
if true then return this; end;
end);
(app).set = (function (this, ...)
local arguments = _arguments(...);
local setting, val = ...;
if _truthy(((1) == (arguments).length)) then
if true then return ((this).settings)[setting]; end;
else
((this).settings)[setting] = val;
if true then return this; end;
end
end);
(app).path = (function (this)
if true then return (_truthy((this).parent) and {((this).parent:path() + (this).route)} or {("")})[1]; end;
end);
(app).enabled = (function (this, setting)
if true then return (not ((not (this:set(setting))))); end;
end);
(app).disabled = (function (this, setting)
if true then return (not (this:set(setting))); end;
end);
(app).enable = (function (this, setting)
if true then return this:set(setting, (true)); end;
end);
(app).disable = (function (this, setting)
if true then return this:set(setting, (false)); end;
end);
(app).configure = (function (this, ...)
local arguments = _arguments(...);
local env, fn = ...;
local envs, args = envs, args;
envs = ("all");
args = (_arr({})).slice:call(arguments);
fn = args:pop();
if _truthy((args).length) then
envs = args;
end
if _truthy((("all") == envs) or _bit.bnot(envs:indexOf((this).settings.env))) then
if fn:call(this) then end;
end
if true then return this; end;
end);
if methods:forEach((function (this, method)
(app)[method] = (function (this, ...)
local arguments = _arguments(...);
local path = ...;
if _truthy((("get") == method) and ((1) == (arguments).length)) then
if true then return this:set(path); end;
end
if _truthy(Array:isArray(path)) then
if console:trace(("passing an array to app.VERB() is deprecated and will be removed in 4.0")) then end;
end
if (not ((this)._usedRouter)) then
if this:use(this.router) then end;
end
if ((this)._router)[method]:apply(this._router, arguments) then end;
if true then return this; end;
end);
end)) then end;
(app).all = (function (this, ...)
local arguments = _arguments(...);
local path = ...;
local args = args;
args = arguments;
if methods:forEach((function (this, method)
if (app)[method]:apply(this, args) then end;
end), this) then end;
if true then return this; end;
end);
(app).del = (app).delete;
(app).render = (function (this, name, options, fn)
local opts, cache, engines, view, err = opts, cache, engines, view, err;
opts = _obj({
  });
cache = (this).cache;
engines = (this).engines;
view = nil;
if _truthy((("function") == _typeof(options))) then
_seq({(function () local _r = options; fn = _r; return _r; end)(), (function () local _r = _obj({
  }); options = _r; return _r; end)()});
end
if utils:merge(opts, this.locals) then end;
if _truthy((options)._locals) then
if utils:merge(opts, options._locals) then end;
end
if utils:merge(opts, options) then end;
(opts).cache = (_truthy(((null) == (opts).cache)) and {this:enabled(("view cache"))} or {(opts).cache})[1];
if _truthy((opts).cache) then
view = (cache)[name];
end
if (not (view)) then
view = _new(this:get(("view")), name, _obj({
  ["defaultEngine"]=this:get(("view engine")),
  ["root"]=this:get(("views")),
  ["engines"]=engines}));
if (not ((view).path)) then
err = _new(Error, ((("Failed to lookup view \"") + name) + ("\"")));
(err).view = view;
if true then return fn(global, err); end;
end
if _truthy((opts).cache) then
(cache)[name] = view;
end
end
local _e = nil
local _s, _r = _xpcall(function ()
if view:render(opts, fn) then end;
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if fn(global, err) then end;
end

end);
(app).listen = (function (this, ...)
local arguments = _arguments(...);
local server = server;
server = http:createServer(this);
if true then return (server).listen:apply(server, arguments); end;
end);

return _module.exports;
end