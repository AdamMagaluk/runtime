function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, utils, connect, fresh, parseRange, parse, mime, req = http, utils, connect, fresh, parseRange, parse, mime, req;
http = require(global, ("http"));
utils = require(global, ("./utils"));
connect = require(global, ("connect"));
fresh = require(global, ("fresh"));
parseRange = require(global, ("range-parser"));
parse = ((connect).utils).parseUrl;
mime = (connect).mime;
req = (function () local _r = (function () local _r = _obj({
  ["__proto__"]=((http).IncomingMessage).prototype}); (module).exports = _r; return _r; end)(); exports = _r; return _r; end)();
(req).get = (function () local _r = (function (this, name)
repeat
local _0 = ("referer"); local _1 = ("referrer"); local _2;
local _r = (function () local _r = name:toLowerCase(); name = _r; return _r; end)();
if _r == _0 then

_r = _1;
end
if _r == _1 then
if true then return ((this).headers).referrer or ((this).headers).referer; end;
_r = _2;
end
if true then return ((this).headers)[name]; end;
until true
end); (req).header = _r; return _r; end)();
(req).accepts = (function (this, ...)
local arguments = _arguments(...);
local type = ...;
local args = args;
args = (((arguments).length > (1)) and {(_arr({})).slice:apply(arguments)} or {type})[1];
if true then return utils:accepts(args, this:get(("Accept"))); end;
end);
(req).acceptsEncoding = (function (this, encoding)
if true then return (not ((not (_bit.bnot((this).acceptedEncodings:indexOf(encoding)))))); end;
end);
(req).acceptsCharset = (function (this, charset)
local accepted = accepted;
accepted = (this).acceptedCharsets;
if true then return (_truthy((accepted).length) and {(not ((not (_bit.bnot(accepted:indexOf(charset))))))} or {(true)})[1]; end;
end);
(req).acceptsLanguage = (function (this, lang)
local accepted = accepted;
accepted = (this).acceptedLanguages;
if true then return (_truthy((accepted).length) and {(not ((not (_bit.bnot(accepted:indexOf(lang))))))} or {(true)})[1]; end;
end);
(req).range = (function (this, size)
local range = range;
range = this:get(("Range"));
if (not (range)) then
if true then return; end;
end
if true then return parseRange(global, size, range); end;
end);
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("acceptedEncodings"), (function (this)
local accept = accept;
accept = this:get(("Accept-Encoding"));
if true then return (_truthy(accept) and {accept:trim():split(_regexp(" *, *", ""))} or {_arr({})})[1]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("accepted"), (function (this)
local accept = accept;
accept = this:get(("Accept"));
if true then return (_truthy(accept) and {utils:parseAccept(accept)} or {_arr({})})[1]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("acceptedLanguages"), (function (this)
local accept = accept;
accept = this:get(("Accept-Language"));
if true then return (_truthy(accept) and {utils:parseParams(accept):map((function (this, obj)
if true then return (obj).value; end;
end))} or {_arr({})})[1]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("acceptedCharsets"), (function (this)
local accept = accept;
accept = this:get(("Accept-Charset"));
if true then return (_truthy(accept) and {utils:parseParams(accept):map((function (this, obj)
if true then return (obj).value; end;
end))} or {_arr({})})[1]; end;
end)); end)() then end;
(req).param = (function (this, name, defaultValue)
local params, body, query = params, body, query;
params = (this).params or _obj({
  });
body = (this).body or _obj({
  });
query = (this).query or _obj({
  });
if _truthy(((null) ~= (params)[name]) and params:hasOwnProperty(name)) then
if true then return (params)[name]; end;
end
if ((null) ~= (body)[name]) then
if true then return (body)[name]; end;
end
if ((null) ~= (query)[name]) then
if true then return (query)[name]; end;
end
if true then return defaultValue; end;
end);
(req).is = (function (this, type)
local ct = ct;
ct = this:get(("Content-Type"));
if (not (ct)) then
if true then return (false); end;
end
ct = (ct:split((";")))[(0)];
if (not (_bit.bnot(type:indexOf(("/"))))) then
type = mime:lookup(type);
end
if _truthy(_bit.bnot(type:indexOf(("*")))) then
type = type:split(("/"));
ct = ct:split(("/"));
if _truthy((("*") == (type)[(0)]) and ((type)[(1)] == (ct)[(1)])) then
if true then return (true); end;
end
if _truthy((("*") == (type)[(1)]) and ((type)[(0)] == (ct)[(0)])) then
if true then return (true); end;
end
if true then return (false); end;
end
if true then return (not ((not (_bit.bnot(ct:indexOf(type)))))); end;
end);
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("protocol"), (function (this)
local trustProxy, proto = trustProxy, proto;
trustProxy = (this).app:get(("trust proxy"));
if _truthy(((this).connection).encrypted) then
if true then return ("https"); end;
end
if (not (trustProxy)) then
if true then return ("http"); end;
end
proto = this:get(("X-Forwarded-Proto")) or ("http");
if true then return (proto:split(_regexp("\\s*,\\s*", "")))[(0)]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("secure"), (function (this)
if true then return (("https") == (this).protocol); end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("ip"), (function (this)
if true then return ((this).ips)[(0)] or ((this).connection).remoteAddress; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("ips"), (function (this)
local trustProxy, val = trustProxy, val;
trustProxy = (this).app:get(("trust proxy"));
val = this:get(("X-Forwarded-For"));
if true then return (_truthy(trustProxy and val) and {val:split(_regexp(" *, *", ""))} or {_arr({})})[1]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("auth"), (function (this)
local auth, parts = auth, parts;
auth = this:get(("Authorization"));
if (not (auth)) then
if true then return; end;
end
parts = auth:split((" "));
if (("basic") ~= (parts)[(0)]:toLowerCase()) then
if true then return; end;
end
if (not ((parts)[(1)])) then
if true then return; end;
end
auth = (parts)[(1)];
auth = _new(Buffer, auth, ("base64")):toString():match(_regexp("^([^:]*):(.*)$", ""));
if (not (auth)) then
if true then return; end;
end
if true then return _obj({
  ["username"]=(auth)[(1)],
  ["password"]=(auth)[(2)]}); end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("subdomains"), (function (this)
local offset = offset;
offset = (this).app:get(("subdomain offset"));
if true then return (this).host or (""):split((".")):reverse():slice(offset); end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("path"), (function (this)
if true then return (parse(global, this)).pathname; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("host"), (function (this)
local trustProxy, host = trustProxy, host;
trustProxy = (this).app:get(("trust proxy"));
host = trustProxy and this:get(("X-Forwarded-Host"));
host = host or this:get(("Host"));
if (not (host)) then
if true then return; end;
end
if true then return (host:split((":")))[(0)]; end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("fresh"), (function (this)
local method, s = method, s;
method = (this).method;
s = ((this).res).statusCode;
if _truthy((("GET") ~= method) and (("HEAD") ~= method)) then
if true then return (false); end;
end
if _truthy((s >= (200)) and (s < (300)) or ((304) == s)) then
if true then return fresh(global, this.headers, (this).res._headers); end;
end
if true then return (false); end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("stale"), (function (this)
if true then return (not ((this).fresh)); end;
end)); end)() then end;
if (function () local base, prop = req, "__defineGetter__"; return base[prop](base, ("xhr"), (function (this)
local val = val;
val = this:get(("X-Requested-With")) or ("");
if true then return (("xmlhttprequest") == val:toLowerCase()); end;
end)); end)() then end;

return _module.exports;
end