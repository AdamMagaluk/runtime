function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, path, connect, utils, sign, normalizeType, normalizeTypes, etag, statusCodes, cookie, send, mime, basename, extname, join, res = http, path, connect, utils, sign, normalizeType, normalizeTypes, etag, statusCodes, cookie, send, mime, basename, extname, join, res;
http = require(global, ("http"));
path = require(global, ("path"));
connect = require(global, ("connect"));
utils = (connect).utils;
sign = (require(global, ("cookie-signature"))).sign;
normalizeType = (require(global, ("./utils"))).normalizeType;
normalizeTypes = (require(global, ("./utils"))).normalizeTypes;
etag = (require(global, ("./utils"))).etag;
statusCodes = (http).STATUS_CODES;
cookie = require(global, ("cookie"));
send = require(global, ("send"));
mime = (connect).mime;
basename = (path).basename;
extname = (path).extname;
join = (path).join;
res = (function () local _r = _obj({
  ["__proto__"]=((http).ServerResponse).prototype}); (module).exports = _r; return _r; end)();
(res).status = (function (this, code)
(this).statusCode = code;
if true then return this; end;
end);
(res).links = (function (this, links)
if true then return this:set(("Link"), Object:keys(links):map((function (this, rel)
if true then return ((((("<") + (links)[rel]) + (">; rel=\"")) + rel) + ("\"")); end;
end)):join((", "))); end;
end);
(res).send = (function (this, ...)
local arguments = _arguments(...);
local body = ...;
local req, head, len, app = req, head, len, app;
req = (this).req;
head = (("HEAD") == (req).method);
len = nil;
app = (this).app;
if _truthy(((2) == (arguments).length)) then
if _truthy((("number") ~= _typeof(body)) and (("number") == _typeof((arguments)[(1)]))) then
(this).statusCode = (arguments)[(1)];
else
(this).statusCode = body;
body = (arguments)[(1)];
end
end
repeat
local _0 = ("number"); local _1 = ("string"); local _2 = ("boolean"); local _3 = ("object");
local _r = _typeof(body);
if _r == _0 then
if this:get(("Content-Type")) or this:type(("txt")) then end;
(this).statusCode = body;
body = ((http).STATUS_CODES)[body];
_c = _break; break;
end
if _r == _1 then
if (not (this:get(("Content-Type")))) then
(this).charset = (this).charset or ("utf-8");
if this:type(("html")) then end;
end
_c = _break; break;
end
if _r == _2 then

_r = _3;
end
if _r == _3 then
if _truthy(((null) == body)) then
body = ("");
else
if _truthy(Buffer:isBuffer(body)) then
if this:get(("Content-Type")) or this:type(("bin")) then end;
else
if true then return this:json(body); end;
end
end
_c = _break; break;
end
until true
if _truthy((undefined ~= body) and (not (this:get(("Content-Length"))))) then
if this:set(("Content-Length"), (function () local _r = (_truthy(Buffer:isBuffer(body)) and {(body).length} or {Buffer:byteLength(body)})[1]; len = _r; return _r; end)()) then end;
end
if _truthy(((app).settings).etag and (len > (1024)) and (("GET") == (req).method)) then
if (not (this:get(("ETag")))) then
if this:set(("ETag"), etag(global, body)) then end;
end
end
if _truthy((req).fresh) then
(this).statusCode = (304);
end
if _truthy(((204) == (this).statusCode) or ((304) == (this).statusCode)) then
if this:removeHeader(("Content-Type")) then end;
if this:removeHeader(("Content-Length")) then end;
if this:removeHeader(("Transfer-Encoding")) then end;
body = ("");
end
if (function () local base, prop = this, "end"; return base[prop](base, (_truthy(head) and {(null)} or {body})[1]); end)() then end;
if true then return this; end;
end);
(res).json = (function (this, ...)
local arguments = _arguments(...);
local obj = ...;
local app, replacer, spaces, body = app, replacer, spaces, body;
if _truthy(((2) == (arguments).length)) then
if _truthy((("number") == _typeof((arguments)[(1)]))) then
(this).statusCode = (arguments)[(1)];
else
(this).statusCode = obj;
obj = (arguments)[(1)];
end
end
app = (this).app;
replacer = app:get(("json replacer"));
spaces = app:get(("json spaces"));
body = JSON:stringify(obj, replacer, spaces);
(this).charset = (this).charset or ("utf-8");
if this:get(("Content-Type")) or this:set(("Content-Type"), ("application/json")) then end;
if true then return this:send(body); end;
end);
(res).jsonp = (function (this, ...)
local arguments = _arguments(...);
local obj = ...;
local app, replacer, spaces, body, callback, cb = app, replacer, spaces, body, callback, cb;
if _truthy(((2) == (arguments).length)) then
if _truthy((("number") == _typeof((arguments)[(1)]))) then
(this).statusCode = (arguments)[(1)];
else
(this).statusCode = obj;
obj = (arguments)[(1)];
end
end
app = (this).app;
replacer = app:get(("json replacer"));
spaces = app:get(("json spaces"));
body = JSON:stringify(obj, replacer, spaces):replace(_regexp("\\u2028", "g"), ("\\u2028")):replace(_regexp("\\u2029", "g"), ("\\u2029"));
callback = (((this).req).query)[app:get(("jsonp callback name"))];
(this).charset = (this).charset or ("utf-8");
if this:set(("Content-Type"), ("application/json")) then end;
if _truthy(callback) then
if _truthy(Array:isArray(callback)) then
callback = (callback)[(0)];
end
if this:set(("Content-Type"), ("text/javascript")) then end;
cb = callback:replace(_regexp("[^\\[\\]\\w$.]", "g"), (""));
body = (((((cb + (" && ")) + cb) + ("(")) + body) + (");"));
end
if true then return this:send(body); end;
end);
(res).sendfile = (function (this, path, options, fn)
local self, req, next, options, done, __K__error, stream, cleanup, file = self, req, next, options, done, __K__error, stream, cleanup, file;
_K_error = (function (this, err)
local _K_error = _debug.getinfo(1, 'f').func;
if _truthy(done) then
if true then return; end;
end
done = (true);
if cleanup(global) then end;
if (not ((self).headerSent)) then
if self:removeHeader(("Content-Disposition")) then end;
end
if _truthy(fn) then
if true then return fn(global, err); end;
end
if _truthy((self).headerSent) then
if true then return; end;
end
if next(global, err) then end;
end);
stream = (function (this)
local stream = _debug.getinfo(1, 'f').func;
if _truthy(done) then
if true then return; end;
end
if cleanup(global) then end;
if _truthy(fn) then
if self:on(("finish"), fn) then end;
end
end);
cleanup = (function (this)
local cleanup = _debug.getinfo(1, 'f').func;
if (req).socket:removeListener(("error"), _K_error) then end;
end);
self = this;
req = (self).req;
next = ((this).req).next;
options = options or _obj({
  });
done = nil;
if _truthy((("function") == _typeof(options))) then
fn = options;
options = _obj({
  });
end
if (req).socket:on(("error"), _K_error) then end;
file = send(global, req, path);
if _truthy((options).root) then
if file:root(options.root) then end;
end
if file:maxage((options).maxAge or (0)) then end;
if file:on(("error"), _K_error) then end;
if file:on(("directory"), next) then end;
if file:on(("stream"), stream) then end;
if file:pipe(this) then end;
if this:on(("finish"), cleanup) then end;
end);
(res).download = (function (this, path, filename, fn)
if _truthy((("function") == _typeof(filename))) then
fn = filename;
filename = (null);
end
filename = filename or path;
if this:set(("Content-Disposition"), ((("attachment; filename=\"") + basename(global, filename)) + ("\""))) then end;
if true then return this:sendfile(path, fn); end;
end);
(res).contentType = (function () local _r = (function (this, type)
if true then return this:set(("Content-Type"), (_truthy(_bit.bnot(type:indexOf(("/")))) and {type} or {mime:lookup(type)})[1]); end;
end); (res).type = _r; return _r; end)();
(res).format = (function (this, obj)
local req, next, fn, keys, key, err = req, next, fn, keys, key, err;
req = (this).req;
next = (req).next;
fn = (obj).default;
if _truthy(fn) then
(obj).default = nil;
end
keys = Object:keys(obj);
key = req:accepts(keys);
if this:vary(("Accept")) then end;
if _truthy(key) then
if this:set(("Content-Type"), normalizeType(global, key).value) then end;
if obj:key(req, this, next) then end;
else
if _truthy(fn) then
if fn(global) then end;
else
err = _new(Error, ("Not Acceptable"));
(err).status = (406);
(err).types = normalizeTypes(global, keys):map((function (this, o)
if true then return (o).value; end;
end));
if next(global, err) then end;
end
end
if true then return this; end;
end);
(res).attachment = (function (this, filename)
if _truthy(filename) then
if this:type(extname(global, filename)) then end;
end
if this:set(("Content-Disposition"), (_truthy(filename) and {((("attachment; filename=\"") + basename(global, filename)) + ("\""))} or {("attachment")})[1]) then end;
if true then return this; end;
end);
(res).set = (function () local _r = (function (this, ...)
local arguments = _arguments(...);
local field, val = ...;
local key = key;
if _truthy(((2) == (arguments).length)) then
if _truthy(Array:isArray(val)) then
val = val:map(String);
else
val = String(global, val);
end
if this:setHeader(field, val) then end;
else
for key in _pairs(field) do
if this:set(key, field[key]) then end;
end
end
if true then return this; end;
end); (res).header = _r; return _r; end)();
(res).get = (function (this, field)
if true then return this:getHeader(field); end;
end);
(res).clearCookie = (function (this, name, options)
local opts = opts;
opts = _obj({
  ["expires"]=_new(Date, (1)),
  ["path"]=("/")});
if true then return this:cookie(name, (""), (_truthy(options) and {utils:merge(opts, options)} or {opts})[1]); end;
end);
(res).cookie = (function (this, name, val, options)
local secret, signed = secret, signed;
options = utils:merge(_obj({
  }), options);
secret = ((this).req).secret;
signed = (options).signed;
if _truthy(signed and (not (secret))) then
_error(_new(Error, ("connect.cookieParser(\"secret\") required for signed cookies")))
end
if _truthy((("number") == _typeof(val))) then
val = val:toString();
end
if _truthy((("object") == _typeof(val))) then
val = (("j:") + JSON:stringify(val));
end
if _truthy(signed) then
val = (("s:") + sign(global, val, secret));
end
if _in(("maxAge"), options) then
(options).expires = _new(Date, (Date:now() + (options).maxAge));
(options).maxAge = (options).maxAge / (1000);
end
if _truthy(((null) == (options).path)) then
(options).path = ("/");
end
if this:set(("Set-Cookie"), cookie:serialize(name, String(global, val), options)) then end;
if true then return this; end;
end);
(res).location = (function (this, url)
local app, req, map, path = app, req, map, path;
app = (this).app;
req = (this).req;
map = _obj({
  ["back"]=req:get(("Referrer")) or ("/")});
url = (map)[url] or url;
if _truthy((not (_bit.bnot(url:indexOf((":--"))))) and ((0) ~= url:indexOf(("//")))) then
path = nil;
if _truthy(((".") == (url)[(0)])) then
path = ((req).originalUrl:split(("?")))[(0)]
      ;
url = ((path + ((_truthy((("/") == (path)[((path).length - (1))])) and {("")} or {("/")})[1])) + url);
else
if (("/") ~= (url)[(0)]) then
path = app:path();
url = ((path + ("/")) + url);
end
end
end
if this:set(("Location"), url) then end;
if true then return this; end;
end);
(res).redirect = (function (this, ...)
local arguments = _arguments(...);
local url = ...;
local app, head, status, body = app, head, status, body;
app = (this).app;
head = (("HEAD") == ((this).req).method);
status = (302);
body = nil;
if _truthy(((2) == (arguments).length)) then
if _truthy((("number") == _typeof(url))) then
status = url;
url = (arguments)[(1)];
else
status = (arguments)[(1)];
end
end
if this:location(url) then end;
url = this:get(("Location"));
if this:format(_obj({
  ["text"]=(function (this)
body = (((statusCodes)[status] + (". Redirecting to ")) + encodeURI(global, url));
end),
  ["html"]=(function (this)
local u = u;
u = utils:escape(url);
body = ((((((("<p>") + (statusCodes)[status]) + (". Redirecting to <a href=\"")) + u) + ("\">")) + u) + ("</a></p>"));
end),
  ["default"]=(function (this)
body = ("");
end)})) then end;
(this).statusCode = status;
if this:set(("Content-Length"), Buffer:byteLength(body)) then end;
if (function () local base, prop = this, "end"; return base[prop](base, (_truthy(head) and {(null)} or {body})[1]); end)() then end;
end);
(res).vary = (function (this, field)
local self, vary = self, vary;
self = this;
if (not (field)) then
if true then return this; end;
end
if _truthy(Array:isArray(field)) then
if field:forEach((function (this, field)
if self:vary(field) then end;
end)) then end;
if true then return; end;
end
vary = this:get(("Vary"));
if _truthy(vary) then
vary = vary:split(_regexp(" *, *", ""));
if (not (_bit.bnot(vary:indexOf(field)))) then
if vary:push(field) then end;
end
if this:set(("Vary"), vary:join((", "))) then end;
if true then return this; end;
end
if this:set(("Vary"), field) then end;
if true then return this; end;
end);
(res).render = (function (this, view, options, fn)
local self, options, req, app = self, options, req, app;
self = this;
options = options or _obj({
  });
req = (this).req;
app = (req).app;
if _truthy((("function") == _typeof(options))) then
_seq({(function () local _r = options; fn = _r; return _r; end)(), (function () local _r = _obj({
  }); options = _r; return _r; end)()});
end
(options)._locals = (self).locals;
fn = fn or (function (this, err, str)
if _truthy(err) then
if true then return req:next(err); end;
end
if self:send(str) then end;
end);
if app:render(view, options, fn) then end;
end);

return _module.exports;
end