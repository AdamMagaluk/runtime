function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Route, utils, methods, debug, parse, Router = Route, utils, methods, debug, parse, Router;
Router = (function (this, options)
local Router = _debug.getinfo(1, 'f').func;
local self, router = self, router;
options = options or _obj({
  });
self = this;
(this).map = _obj({
  });
(this).params = _obj({
  });
(this)._params = _arr({});
(this).caseSensitive = (options).caseSensitive;
(this).strict = (options).strict;
(this).middleware = (function () router = (function (this, req, res, next)
local router = _debug.getinfo(1, 'f').func;
if (function () local base, prop = self, "_dispatch"; return base[prop](base, req, res, next); end)() then end;
end); return router; end)();
end);
Route = require(global, ("./route"));
utils = require(global, ("../utils"));
methods = require(global, ("methods"));
debug = require(global, ("debug"))(global, ("express:router"));
parse = ((require(global, ("connect"))).utils).parseUrl;
exports = (function () local _r = Router; (module).exports = _r; return _r; end)();
((Router).prototype).param = (function (this, name, fn)
local params, len, ret, i = params, len, ret, i;
if _truthy((("function") == _typeof(name))) then
if (this)._params:push(name) then end;
if true then return; end;
end
params = (this)._params;
len = (params).length;
ret = nil;
i = (0);
while (i < len) do

if _truthy((function () local _r = params:i(name, fn); ret = _r; return _r; end)()) then
fn = ret;
end

if (function () i = i + 1; return i; end)() then end;
end
if (("function") ~= _typeof(fn)) then
_error(_new(Error, (((("invalid param() call for ") + name) + (", got ")) + fn)))
end
if (function () local _r = ((this).params)[name] or _arr({}); ((this).params)[name] = _r; return _r; end)():push(fn) then end;
if true then return this; end;
end);
((Router).prototype)._dispatch = (function (this, req, res, next)
local params, self, pass = params, self, pass;
params = (this).params;
self = this;
if debug(global, ("dispatching %s %s (%s)"), req.method, req.url, req.originalUrl) then end;
if (function (this, i, err)
local pass = _debug.getinfo(1, 'f').func;
local paramCallbacks, paramIndex, paramVal, route, keys, key, nextRoute, param, paramCallback, callbacks = paramCallbacks, paramIndex, paramVal, route, keys, key, nextRoute, param, paramCallback, callbacks;
nextRoute = (function (this, err)
local nextRoute = _debug.getinfo(1, 'f').func;
if pass(global, ((req)._route_index + (1)), err) then end;
end);
param = (function (this, err)
local param = _debug.getinfo(1, 'f').func;
paramIndex = (0);
key = (keys)[(function () local _r = i; i = _r + 1; return _r end)()];
paramVal = key and ((req).params)[(key).name];
paramCallbacks = key and (params)[(key).name];
local _e = nil
local _s, _r = _xpcall(function ()
if _truthy((("route") == err)) then
if nextRoute(global) then end;
else
if _truthy(err) then
i = (0);
if callbacks(global, err) then end;
else
if _truthy(paramCallbacks and (undefined ~= paramVal)) then
if paramCallback(global) then end;
else
if _truthy(key) then
if param(global) then end;
else
i = (0);
if callbacks(global) then end;
end
end
end
end
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if param(global, err) then end;
end

end);
paramCallback = (function (this, err)
local paramCallback = _debug.getinfo(1, 'f').func;
local fn = fn;
fn = (paramCallbacks)[(function () local _r = paramIndex; paramIndex = _r + 1; return _r end)()];
if _truthy(err or (not (fn))) then
if true then return param(global, err); end;
end
if fn(global, req, res, paramCallback, paramVal, key.name) then end;
end);
callbacks = (function (this, err)
local callbacks = _debug.getinfo(1, 'f').func;
local fn = fn;
fn = ((route).callbacks)[(function () local _r = i; i = _r + 1; return _r end)()];
local _e = nil
local _s, _r = _xpcall(function ()
if _truthy((("route") == err)) then
if nextRoute(global) then end;
else
if _truthy(err and fn) then
if ((fn).length < (4)) then
if true then return callbacks(global, err); end;
end
if fn(global, err, req, res, callbacks) then end;
else
if _truthy(fn) then
if ((fn).length < (4)) then
if true then return fn(global, req, res, callbacks); end;
end
if callbacks(global) then end;
else
if nextRoute(global, err) then end;
end
end
end
    end, function (err)
        _e = err
    end)
if _s == false then
err = _e;
if callbacks(global, err) then end;
end

end);
paramCallbacks = nil;
paramIndex = (0);
paramVal = nil;
route = nil;
keys = nil;
key = nil;
(req).route = (function () local _r = self:matchRequest(req, i); route = _r; return _r; end)();
if _truthy((not (route)) and (("OPTIONS") == (req).method)) then
if true then return (function () local base, prop = self, "_options"; return base[prop](base, req, res); end)(); end;
end
if (not (route)) then
if true then return next(global, err); end;
end
if debug(global, ("matched %s %s"), route.method, route.path) then end;
(req).params = (route).params;
keys = (route).keys;
i = (0);
if param(global, err) then end;
end)(global, (0)) then end;
end);
((Router).prototype)._options = (function (this, req, res)
local path, body = path, body;
path = (parse(global, req)).pathname;
body = (function () local base, prop = this, "_optionsFor"; return base[prop](base, path); end)():join((","));
if res:set(("Allow"), body):send(body) then end;
end);
((Router).prototype)._optionsFor = (function (this, path)
local self = self;
self = this;
if true then return methods:filter((function (this, method)
local routes, i, len = routes, i, len;
routes = ((self).map)[method];
if _truthy((not (routes)) or (("options") == method)) then
if true then return; end;
end
i = (0);
len = (routes).length;
while (i < len) do

if _truthy((routes)[i]:match(path)) then
if true then return (true); end;
end

if (function () i = i + 1; return i; end)() then end;
end
end)):map((function (this, method)
if true then return method:toUpperCase(); end;
end)); end;
end);
((Router).prototype).matchRequest = (function (this, req, i, head)
local method, url, path, routes, i, route, len = method, url, path, routes, i, route, len;
method = (req).method:toLowerCase();
url = parse(global, req);
path = (url).pathname;
routes = (this).map;
i = i or (0);
route = nil;
if _truthy((not (head)) and (("head") == method)) then
route = this:matchRequest(req, i, (true));
if _truthy(route) then
if true then return route; end;
end
method = ("get");
end
if _truthy((function () local _r = (routes)[method]; routes = _r; return _r; end)()) then
len = (routes).length;
while (i < len) do

route = (routes)[i];
if _truthy(route:match(path)) then
(req)._route_index = i;
if true then return route; end;
end

if (function () i = i + 1; return i; end)() then end;
end
end
end);
((Router).prototype).match = (function (this, method, url, i, head)
local req = req;
req = _obj({
  ["method"]=method,
  ["url"]=url});
if true then return this:matchRequest(req, i, head); end;
end);
((Router).prototype).route = (function (this, ...)
local arguments = _arguments(...);
local method, path, callbacks = ...;
local method, callbacks, route = method, callbacks, route;
method = method:toLowerCase();
callbacks = utils:flatten((_arr({})).slice:call(arguments, (2)));
if (not (path)) then
_error(_new(Error, ((("Router#") + method) + ("() requires a path"))))
end
if callbacks:forEach((function (this, fn, i)
local type, msg = type, msg;
if _truthy((("function") == _typeof(fn))) then
if true then return; end;
end
type = (_obj({
  })).toString:call(fn);
msg = ((((".") + method) + ("() requires callback functions but got a ")) + type);
_error(_new(Error, msg))
end)) then end;
if debug(global, ("defined %s %s"), method, path) then end;
route = _new(Route, method, path, callbacks, _obj({
  ["sensitive"]=(this).caseSensitive,
  ["strict"]=(this).strict}));
if (function () local _r = ((this).map)[method] or _arr({}); ((this).map)[method] = _r; return _r; end)():push(route) then end;
if true then return this; end;
end);
if methods:forEach((function (this, method)
((Router).prototype)[method] = (function (this, ...)
local arguments = _arguments(...);
local path = ...;
local args = args;
args = _arr({[0]=method}):concat((_arr({})).slice:call(arguments));
if (this).route:apply(this, args) then end;
if true then return this; end;
end);
end)) then end;

return _module.exports;
end