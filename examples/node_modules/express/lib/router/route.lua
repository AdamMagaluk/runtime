function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local utils, Route = utils, Route;
Route = (function (this, method, path, callbacks, options)
local Route = _debug.getinfo(1, 'f').func;
options = options or _obj({
  });
(this).path = path;
(this).method = method;
(this).callbacks = callbacks;
(this).regexp = utils:pathRegexp(path, (function () local _r = _arr({}); (this).keys = _r; return _r; end)(), options.sensitive, options.strict);
end);
utils = require(global, ("../utils"));
(module).exports = Route;
((Route).prototype).match = (function (this, path)
local keys, params, m, i, len, key, val = keys, params, m, i, len, key, val;
keys = (this).keys;
params = (function () local _r = _arr({}); (this).params = _r; return _r; end)();
m = (this).regexp:exec(path);
if (not (m)) then
if true then return (false); end;
end
i = (1);
len = (m).length;
while (i < len) do

key = (keys)[(i - (1))];
val = (_truthy((("string") == _typeof((m)[i]))) and {decodeURIComponent(global, m[i])} or {(m)[i]})[1];
if _truthy(key) then
(params)[(key).name] = val;
else
if params:push(val) then end;
end

if (function () i = i + 1; return i; end)() then end;
end
if true then return (true); end;
end);

return _module.exports;
end