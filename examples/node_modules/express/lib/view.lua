function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local path, fs, utils, dirname, basename, extname, exists, join, View = path, fs, utils, dirname, basename, extname, exists, join, View;
View = (function (this, name, options)
local View = _debug.getinfo(1, 'f').func;
local engines, ext = engines, ext;
options = options or _obj({
  });
(this).name = name;
(this).root = (options).root;
engines = (options).engines;
(this).defaultEngine = (options).defaultEngine;
ext = (function () local _r = extname(global, name); (this).ext = _r; return _r; end)();
if _truthy((not (ext)) and (not ((this).defaultEngine))) then
_error(_new(Error, ("No default engine was specified and no extension was provided.")))
end
if (not (ext)) then
name = name + (function () local _r = (function () local _r = (((((".") ~= ((this).defaultEngine)[(0)]) and {(".")} or {("")})[1]) + (this).defaultEngine); (this).ext = _r; return _r; end)(); ext = _r; return _r; end)();
end
(this).engine = (engines)[ext] or (function () local _r = (require(global, ext:slice((1)))).__express; (engines)[ext] = _r; return _r; end)();
(this).path = this:lookup(name);
end);
path = require(global, ("path"));
fs = require(global, ("fs"));
utils = require(global, ("./utils"));
dirname = (path).dirname;
basename = (path).basename;
extname = (path).extname;
exists = (fs).existsSync or (path).existsSync;
join = (path).join;
(module).exports = View;
((View).prototype).lookup = (function (this, path)
local ext = ext;
ext = (this).ext;
if (not (utils:isAbsolute(path))) then
path = join(global, this.root, path);
end
if _truthy(exists(global, path)) then
if true then return path; end;
end
path = join(global, dirname(global, path), basename(global, path, ext), (("index") + ext));
if _truthy(exists(global, path)) then
if true then return path; end;
end
end);
((View).prototype).render = (function (this, options, fn)
if this:engine(this.path, options, fn) then end;
end);

return _module.exports;
end