function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local exports, keypress, isEmittingKeypress, metaKeyCodeRe, functionKeyCodeRe, emitKey = exports, keypress, isEmittingKeypress, metaKeyCodeRe, functionKeyCodeRe, emitKey;
keypress = (function (this, stream)
local keypress = _debug.getinfo(1, 'f').func;
local onData, onNewListener = onData, onNewListener;
onData = (function (this, b)
local onData = _debug.getinfo(1, 'f').func;
if ((stream:listeners(("keypress"))).length > (0)) then
if emitKey(global, stream, b) then end;
else
if stream:removeListener(("data"), onData) then end;
if stream:on(("newListener"), onNewListener) then end;
end
end);
onNewListener = (function (this, event)
local onNewListener = _debug.getinfo(1, 'f').func;
if _truthy((event == ("keypress"))) then
if stream:on(("data"), onData) then end;
if stream:removeListener(("newListener"), onNewListener) then end;
end
end);
if _truthy(isEmittingKeypress(global, stream)) then
if true then return; end;
end
(stream)._emitKeypress = (true);
if ((stream:listeners(("keypress"))).length > (0)) then
if stream:on(("data"), onData) then end;
else
if stream:on(("newListener"), onNewListener) then end;
end
end);
isEmittingKeypress = (function (this, stream)
local isEmittingKeypress = _debug.getinfo(1, 'f').func;
local rtn = rtn;
rtn = (stream)._emitKeypress;
if (not (rtn)) then
if stream:listeners(("data")):forEach((function (this, l)
if _truthy(((l).name == ("onData")) and _regexp("emitKey", ""):test(l:toString())) then
rtn = (true);
(stream)._emitKeypress = (true);
end
end)) then end;
end
if (not (rtn)) then
if stream:listeners(("newListener")):forEach((function (this, l)
if _truthy(((l).name == ("onNewListener")) and _regexp("keypress", ""):test(l:toString())) then
rtn = (true);
(stream)._emitKeypress = (true);
end
end)) then end;
end
if true then return rtn; end;
end);
emitKey = (function (this, stream, s)
local emitKey = _debug.getinfo(1, 'f').func;
local ch, key, parts, code, modifier, s, b = ch, key, parts, code, modifier, s, b;
ch = nil;
key = _obj({
  ["name"]=undefined,
  ["ctrl"]=false,
  ["meta"]=false,
  ["shift"]=false});
parts = nil;
if _truthy(Buffer:isBuffer(s)) then
if _truthy(((s)[(0)] > (127)) and ((s)[(1)] == undefined)) then
(s)[(0)] = (s)[(0)] - (128);
s = (("\x1b") + s:toString((stream).encoding or ("utf-8")));
else
s = s:toString((stream).encoding or ("utf-8"));
end
end
(key).sequence = s;
if _truthy((s == ("\r")) or (s == ("\n"))) then
(key).name = ("enter");
else
if (s == ("\t")) then
(key).name = ("tab");
else
if _truthy((s == ("\b")) or (s == ("")) or (s == ("\x1b")) or (s == ("\x1b\b"))) then
(key).name = ("backspace");
(key).meta = (s:charAt((0)) == ("\x1b"));
else
if _truthy((s == ("\x1b")) or (s == ("\x1b\u001b"))) then
(key).name = ("escape");
(key).meta = ((s).length == (2));
else
if _truthy((s == (" ")) or (s == ("\x1b "))) then
(key).name = ("space");
(key).meta = ((s).length == (2));
else
if (s <= ("\x1a")) then
(key).name = String:fromCharCode(((s:charCodeAt((0)) + ("a"):charCodeAt((0))) - (1)));
(key).ctrl = (true);
else
if _truthy(((s).length == (1)) and (s >= ("a")) and (s <= ("z"))) then
(key).name = s;
else
if _truthy(((s).length == (1)) and (s >= ("A")) and (s <= ("Z"))) then
(key).name = s:toLowerCase();
(key).shift = (true);
else
if _truthy((function () local _r = metaKeyCodeRe:exec(s); parts = _r; return _r; end)()) then
(key).name = (parts)[(1)]:toLowerCase();
(key).meta = (true);
(key).shift = _regexp("^[A-Z]$", ""):test(parts[(1)]);
else
if _truthy((function () local _r = functionKeyCodeRe:exec(s); parts = _r; return _r; end)()) then
code = (((((parts)[(1)] or ("")) + ((parts)[(2)] or (""))) +
               ((parts)[(4)] or (""))) + ((parts)[(6)] or ("")));
modifier = (((parts)[(3)] or (parts)[(5)] or (1)) - (1));
(key).ctrl = (not ((not (_bit.band(modifier, (4))))));
(key).meta = (not ((not (_bit.band(modifier, (10))))));
(key).shift = (not ((not (_bit.band(modifier, (1))))));
(key).code = code;
repeat
local _0 = ("OP"); local _1 = ("OQ"); local _2 = ("OR"); local _3 = ("OS"); local _4 = ("[11~"); local _5 = ("[12~"); local _6 = ("[13~"); local _7 = ("[14~"); local _8 = ("[[A"); local _9 = ("[[B"); local _10 = ("[[C"); local _11 = ("[[D"); local _12 = ("[[E"); local _13 = ("[15~"); local _14 = ("[17~"); local _15 = ("[18~"); local _16 = ("[19~"); local _17 = ("[20~"); local _18 = ("[21~"); local _19 = ("[23~"); local _20 = ("[24~"); local _21 = ("[A"); local _22 = ("[B"); local _23 = ("[C"); local _24 = ("[D"); local _25 = ("[E"); local _26 = ("[F"); local _27 = ("[H"); local _28 = ("OA"); local _29 = ("OB"); local _30 = ("OC"); local _31 = ("OD"); local _32 = ("OE"); local _33 = ("OF"); local _34 = ("OH"); local _35 = ("[1~"); local _36 = ("[2~"); local _37 = ("[3~"); local _38 = ("[4~"); local _39 = ("[5~"); local _40 = ("[6~"); local _41 = ("[[5~"); local _42 = ("[[6~"); local _43 = ("[7~"); local _44 = ("[8~"); local _45 = ("[a"); local _46 = ("[b"); local _47 = ("[c"); local _48 = ("[d"); local _49 = ("[e"); local _50 = ("[2$"); local _51 = ("[3$"); local _52 = ("[5$"); local _53 = ("[6$"); local _54 = ("[7$"); local _55 = ("[8$"); local _56 = ("Oa"); local _57 = ("Ob"); local _58 = ("Oc"); local _59 = ("Od"); local _60 = ("Oe"); local _61 = ("[2^"); local _62 = ("[3^"); local _63 = ("[5^"); local _64 = ("[6^"); local _65 = ("[7^"); local _66 = ("[8^"); local _67 = ("[Z"); local _68;
local _r = code;
if _r == _0 then
(key).name = ("f1");
_c = _break; break;
end
if _r == _1 then
(key).name = ("f2");
_c = _break; break;
end
if _r == _2 then
(key).name = ("f3");
_c = _break; break;
end
if _r == _3 then
(key).name = ("f4");
_c = _break; break;
end
if _r == _4 then
(key).name = ("f1");
_c = _break; break;
end
if _r == _5 then
(key).name = ("f2");
_c = _break; break;
end
if _r == _6 then
(key).name = ("f3");
_c = _break; break;
end
if _r == _7 then
(key).name = ("f4");
_c = _break; break;
end
if _r == _8 then
(key).name = ("f1");
_c = _break; break;
end
if _r == _9 then
(key).name = ("f2");
_c = _break; break;
end
if _r == _10 then
(key).name = ("f3");
_c = _break; break;
end
if _r == _11 then
(key).name = ("f4");
_c = _break; break;
end
if _r == _12 then
(key).name = ("f5");
_c = _break; break;
end
if _r == _13 then
(key).name = ("f5");
_c = _break; break;
end
if _r == _14 then
(key).name = ("f6");
_c = _break; break;
end
if _r == _15 then
(key).name = ("f7");
_c = _break; break;
end
if _r == _16 then
(key).name = ("f8");
_c = _break; break;
end
if _r == _17 then
(key).name = ("f9");
_c = _break; break;
end
if _r == _18 then
(key).name = ("f10");
_c = _break; break;
end
if _r == _19 then
(key).name = ("f11");
_c = _break; break;
end
if _r == _20 then
(key).name = ("f12");
_c = _break; break;
end
if _r == _21 then
(key).name = ("up");
_c = _break; break;
end
if _r == _22 then
(key).name = ("down");
_c = _break; break;
end
if _r == _23 then
(key).name = ("right");
_c = _break; break;
end
if _r == _24 then
(key).name = ("left");
_c = _break; break;
end
if _r == _25 then
(key).name = ("clear");
_c = _break; break;
end
if _r == _26 then
(key).name = ("end");
_c = _break; break;
end
if _r == _27 then
(key).name = ("home");
_c = _break; break;
end
if _r == _28 then
(key).name = ("up");
_c = _break; break;
end
if _r == _29 then
(key).name = ("down");
_c = _break; break;
end
if _r == _30 then
(key).name = ("right");
_c = _break; break;
end
if _r == _31 then
(key).name = ("left");
_c = _break; break;
end
if _r == _32 then
(key).name = ("clear");
_c = _break; break;
end
if _r == _33 then
(key).name = ("end");
_c = _break; break;
end
if _r == _34 then
(key).name = ("home");
_c = _break; break;
end
if _r == _35 then
(key).name = ("home");
_c = _break; break;
end
if _r == _36 then
(key).name = ("insert");
_c = _break; break;
end
if _r == _37 then
(key).name = ("delete");
_c = _break; break;
end
if _r == _38 then
(key).name = ("end");
_c = _break; break;
end
if _r == _39 then
(key).name = ("pageup");
_c = _break; break;
end
if _r == _40 then
(key).name = ("pagedown");
_c = _break; break;
end
if _r == _41 then
(key).name = ("pageup");
_c = _break; break;
end
if _r == _42 then
(key).name = ("pagedown");
_c = _break; break;
end
if _r == _43 then
(key).name = ("home");
_c = _break; break;
end
if _r == _44 then
(key).name = ("end");
_c = _break; break;
end
if _r == _45 then
(key).name = ("up");
(key).shift = (true);
_c = _break; break;
end
if _r == _46 then
(key).name = ("down");
(key).shift = (true);
_c = _break; break;
end
if _r == _47 then
(key).name = ("right");
(key).shift = (true);
_c = _break; break;
end
if _r == _48 then
(key).name = ("left");
(key).shift = (true);
_c = _break; break;
end
if _r == _49 then
(key).name = ("clear");
(key).shift = (true);
_c = _break; break;
end
if _r == _50 then
(key).name = ("insert");
(key).shift = (true);
_c = _break; break;
end
if _r == _51 then
(key).name = ("delete");
(key).shift = (true);
_c = _break; break;
end
if _r == _52 then
(key).name = ("pageup");
(key).shift = (true);
_c = _break; break;
end
if _r == _53 then
(key).name = ("pagedown");
(key).shift = (true);
_c = _break; break;
end
if _r == _54 then
(key).name = ("home");
(key).shift = (true);
_c = _break; break;
end
if _r == _55 then
(key).name = ("end");
(key).shift = (true);
_c = _break; break;
end
if _r == _56 then
(key).name = ("up");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _57 then
(key).name = ("down");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _58 then
(key).name = ("right");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _59 then
(key).name = ("left");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _60 then
(key).name = ("clear");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _61 then
(key).name = ("insert");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _62 then
(key).name = ("delete");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _63 then
(key).name = ("pageup");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _64 then
(key).name = ("pagedown");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _65 then
(key).name = ("home");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _66 then
(key).name = ("end");
(key).ctrl = (true);
_c = _break; break;
end
if _r == _67 then
(key).name = ("tab");
(key).shift = (true);
_c = _break; break;
end
(key).name = ("undefined");
_c = _break; break;
until true
else
if _truthy(((s).length > (1)) and ((s)[(0)] ~= ("\x1b"))) then
if ((Array).prototype).forEach:call(s, (function (this, c)
if emitKey(global, stream, c) then end;
end)) then end;
if true then return; end;
end
end
end
end
end
end
end
end
end
end
end
if _truthy(((key).code == ("[M"))) then
(key).name = ("mouse");
s = (key).sequence;
b = s:charCodeAt((3));
(key).x = (s:charCodeAt((4)) - (32));
(key).y = (s:charCodeAt((5)) - (32));
(key).scroll = (0);
(key).ctrl = (not ((not (_bit.band(_bit.lshift((1), (4)), b)))));
(key).meta = (not ((not (_bit.band(_bit.lshift((1), (3)), b)))));
(key).shift = (not ((not (_bit.band(_bit.lshift((1), (2)), b)))));
(key).release = (_bit.band((3), b) == (3));
if _truthy(_bit.band(_bit.lshift((1), (6)), b)) then
(key).scroll = (_truthy(_bit.band((1), b)) and {(1)} or {(-(1))})[1];
end
if _truthy((not ((key).release)) and (not ((key).scroll))) then
(key).button = _bit.band(b, (3));
end
end
if ((key).name == undefined) then
key = undefined;
end
if ((s).length == (1)) then
ch = s;
end
if _truthy(key and ((key).name == ("mouse"))) then
if stream:emit(("mousepress"), key)
   then end;
else
if _truthy(key or ch) then
if stream:emit(("keypress"), ch, key) then end;
end
end
end);
exports = (function () local _r = keypress; (module).exports = _r; return _r; end)();
(exports).enableMouse = (function (this, stream)
if stream:write((("\x1b") +("[?1000h")))
 then end;
end)

;
(exports).disableMouse = (function (this, stream)
if stream:write((("\x1b") +("[?1000l")))
 then end;
end)




;
metaKeyCodeRe = _regexp("^(?:\\x1b)([a-zA-Z0-9])$", "");
functionKeyCodeRe = _regexp("^(?:\\x1b+)(O|N|\\[|\\[\\[)(?:(\\d+)(?:;(\\d+))?([~^$])|(?:1;)?(\\d+)?([a-zA-Z]))", "");

return _module.exports;
end