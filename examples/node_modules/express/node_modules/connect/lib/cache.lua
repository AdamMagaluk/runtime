

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local Cache = Cache;
Cache = (function (this, limit)
local Cache = _debug.getinfo(1, 'f').func;
(this).store = _obj({
  });
(this).keys = _arr({});
(this).limit = limit;
end);
(module).exports = Cache;
((Cache).prototype).touch = (function (this, key, i)
if (this).keys:splice(i, (1)) then end;
if (this).keys:push(key) then end;
end);
((Cache).prototype).remove = (function (this, key)
((this).store)[key] = nil;
end);
((Cache).prototype).get = (function (this, key)
if true then return ((this).store)[key]; end;
end);
((Cache).prototype).add = (function (this, key)
local len, arr = len, arr;
len = (this).keys:push(key);
if (len > (this).limit) then
if this:remove((this).keys:shift()) then end;
end
arr = (function () local _r = _arr({}); ((this).store)[key] = _r; return _r; end)();
(arr).createdAt = _new(Date);
if true then return arr; end;
end);

return _module.exports;
end