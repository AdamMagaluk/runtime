

function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, utils, debug, app, env = http, utils, debug, app, env;
http = require(global, ("http"));
utils = require(global, ("./utils"));
debug = require(global, ("debug"))(global, ("connect:dispatcher"));
app = (function () local _r = _obj({
  }); (module).exports = _r; return _r; end)();
env = ((process).env).NODE_ENV or ("development");
(app).use = (function (this, route, fn)
local server = server;
if (("string") ~= _typeof(route)) then
fn = route;
route = ("/");
end
if _truthy((("function") == _typeof((fn).handle))) then
server = fn;
(fn).route = route;
fn = (function (this, req, res, next)
if server:handle(req, res, next) then end;
end);
end
if _instanceof(fn, (http).Server) then
fn = (fn:listeners(("request")))[(0)];
end
if _truthy((("/") == (route)[((route).length - (1))])) then
route = route:slice((0), (-(1)));
end
if debug(global, ("use %s %s"), route or ("/"), (fn).name or ("anonymous")) then end;
if (this).stack:push(_obj({
  ["route"]=route,
  ["handle"]=fn})) then end;
if true then return this; end;
end);
(app).handle = (function (this, req, res, out)
local stack, fqdn, removed, slashAdded, index, next = stack, fqdn, removed, slashAdded, index, next;
next = (function (this, err)
local next = _debug.getinfo(1, 'f').func;
local layer, path, status, c, msg, arity = layer, path, status, c, msg, arity;
layer = nil;
path = nil;
status = nil;
c = nil;
if _truthy(slashAdded) then
(req).url = (req).url:substr((1));
slashAdded = (false);
end
(req).url = (removed + (req).url);
(req).originalUrl = (req).originalUrl or (req).url;
removed = ("");
layer = (stack)[(function () local _r = index; index = _r + 1; return _r end)()];
if _truthy((not (layer)) or (res).headerSent) then
if _truthy(out) then
if true then return out(global, err); end;
end
if _truthy(err) then
if ((res).statusCode < (400)) then
(res).statusCode = (500);
end
if debug(global, ("default %s"), res.statusCode) then end;
if _truthy((err).status) then
(res).statusCode = (err).status;
end
msg = (_truthy((("production") == env)) and {((http).STATUS_CODES)[(res).statusCode]} or {(err).stack or err:toString()})[1];
if (("test") ~= env) then
if (function () local base, prop = console, "error"; return base[prop](base, (err).stack or err:toString()); end)() then end;
end
if _truthy((res).headerSent) then
if true then return (req).socket:destroy(); end;
end
if res:setHeader(("Content-Type"), ("text/plain")) then end;
if res:setHeader(("Content-Length"), Buffer:byteLength(msg)) then end;
if _truthy((("HEAD") == (req).method)) then
if true then return (function () local base, prop = res, "end"; return base[prop](base); end)(); end;
end
if (function () local base, prop = res, "end"; return base[prop](base, msg); end)() then end;
else
if debug(global, ("default 404")) then end;
(res).statusCode = (404);
if res:setHeader(("Content-Type"), ("text/plain")) then end;
if _truthy((("HEAD") == (req).method)) then
if true then return (function () local base, prop = res, "end"; return base[prop](base); end)(); end;
end
if (function () local base, prop = res, "end"; return base[prop](base, (((("Cannot ") + utils:escape(req.method)) + (" ")) + utils:escape(req.originalUrl))); end)() then end;
end
if true then return; end;
end
local _e = nil
local _s, _r = _xpcall(function ()
path = (utils:parseUrl(req)).pathname;
if _truthy((undefined == path)) then
path = ("/");
end
if ((0) ~= path:toLowerCase():indexOf((layer).route:toLowerCase())) then
if true then return next(global, err); end;
end
c = (path)[((layer).route).length];
if _truthy(c and (("/") ~= c) and ((".") ~= c)) then
if true then return next(global, err); end;
end
removed = (layer).route;
(req).url = (req).url:substr(removed.length);
if _truthy((not (fqdn)) and (("/") ~= ((req).url)[(0)])) then
(req).url = (("/") + (req).url);
slashAdded = (true);
end
if debug(global, ("%s %s : %s"), ((layer).handle).name or ("anonymous"), layer.route, req.originalUrl) then end;
arity = ((layer).handle).length;
if _truthy(err) then
if (arity == (4)) then
if layer:handle(err, req, res, next) then end;
else
if next(global, err) then end;
end
else
if (arity < (4)) then
if layer:handle(req, res, next) then end;
else
if next(global) then end;
end
end
    end, function (err)
        _e = err
    end)
if _s == false then
e = _e;
if next(global, e) then end;
end

end);
stack = (this).stack;
fqdn = _bit.bnot((req).url:indexOf((":--")));
removed = ("");
slashAdded = (false);
index = (0);
if next(global) then end;
end);
(app).listen = (function (this, ...)
local arguments = _arguments(...);
local server = server;
server = http:createServer(this);
if true then return (server).listen:apply(server, arguments); end;
end);

return _module.exports;
end