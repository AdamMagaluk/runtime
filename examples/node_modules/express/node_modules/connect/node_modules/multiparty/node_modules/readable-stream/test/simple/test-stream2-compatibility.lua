-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.


function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, R, assert, util, EE, ondataCalled, TestReader, reader = common, R, assert, util, EE, ondataCalled, TestReader, reader;
TestReader = (function (this)
local TestReader = _debug.getinfo(1, 'f').func;
if R:apply(this) then end;
(this)._buffer = _new(Buffer, (100));
if (this)._buffer:fill(("x")) then end;
if this:on(("data"), (function (this)
(function () local _r = ondataCalled; ondataCalled = _r + 1; return _r end)();
end)) then end;
end);
common = require(global, ("../common.js"));
R = require(global, ("../../lib/_stream_readable"));
assert = require(global, ("assert"));
util = require(global, ("util"));
EE = (require(global, ("events"))).EventEmitter;
ondataCalled = (0);
if util:inherits(TestReader, R) then end;
((TestReader).prototype)._read = (function (this, n)
if this:push(this._buffer) then end;
(this)._buffer = _new(Buffer, (0));
end);
reader = _new(TestReader);
if assert:equal(ondataCalled, (1)) then end;

return _module.exports;
end