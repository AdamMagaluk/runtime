-- Copyright Joyent, Inc. and other Node contributors.
--
-- Permission is hereby granted, free of charge, to any person obtaining a
-- copy of this software and associated documentation files (the
-- "Software"), to deal in the Software without restriction, including
-- without limitation the rights to use, copy, modify, merge, publish,
-- distribute, sublicense, and/or sell copies of the Software, and to permit
-- persons to whom the Software is furnished to do so, subject to the
-- following conditions:
--
-- The above copyright notice and this permission notice shall be included
-- in all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
-- OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
-- MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
-- NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
-- DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
-- USE OR OTHER DEALINGS IN THE SOFTWARE.


function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local common, assert, stream, chunk, util, TestWriter, dest, TestReader, src, i = common, assert, stream, chunk, util, TestWriter, dest, TestReader, src, i;
TestWriter = (function (this)
local TestWriter = _debug.getinfo(1, 'f').func;
if (stream).Writable:call(this) then end;
end);
TestReader = (function (this)
local TestReader = _debug.getinfo(1, 'f').func;
if (stream).Readable:call(this, _obj({
  ["highWaterMark"]=0x10000})) then end;
end);
common = require(global, ("../common.js"));
assert = require(global, ("assert"));
stream = require(global, ("../../readable"));
chunk = _new(Buffer, ("hallo"));
util = require(global, ("util"));
if util:inherits(TestWriter, stream.Writable) then end;
((TestWriter).prototype)._write = (function (this, buffer, encoding, callback)
if callback(global, (null)) then end;
end);
dest = _new(TestWriter);
if util:inherits(TestReader, stream.Readable) then end;
((TestReader).prototype)._read = (function (this, size)
if this:push(chunk) then end;
end);
src = _new(TestReader);
i = (0);
while (i < (10)) do

if src:pipe(dest) then end;
if src:unpipe(dest) then end;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if assert:equal(src:listeners(("end")).length, (0)) then end;
if assert:equal(src:listeners(("readable")).length, (0)) then end;
if assert:equal(dest:listeners(("unpipe")).length, (0)) then end;
if assert:equal(dest:listeners(("drain")).length, (0)) then end;
if assert:equal(dest:listeners(("error")).length, (0)) then end;
if assert:equal(dest:listeners(("close")).length, (0)) then end;
if assert:equal(dest:listeners(("finish")).length, (0)) then end;
if (function () local base, prop = console, "error"; return base[prop](base, src._readableState); end)() then end;
if process:on(("exit"), (function (this)
if assert(global, (((src)._readableState).length >= ((src)._readableState).highWaterMark)) then end;
(((src)._readableState).buffer).length = (0);
if (function () local base, prop = console, "error"; return base[prop](base, src._readableState); end)() then end;
end)) then end;

return _module.exports;
end