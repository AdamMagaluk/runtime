function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, multiparty, http, path, TMP____PATH, server = assert, multiparty, http, path, TMP____PATH, server;
assert = require(global, ("assert"));
multiparty = require(global, ("../../"));
http = require(global, ("http"));
path = require(global, ("path"));
TMP__PATH = path:join(____dirname, (".."), ("tmp"));
server = http:createServer((function (this, req, res)
local form = form;
form = _new((multiparty).Form);
(form).uploadDir = TMP__PATH;
if form:on(("close"), (function (this)
_error(_new(Error, ("Unexpected \"close\" event")))
end)) then end;
if form:on(("end"), (function (this)
_error(_new(Error, ("Unexpected \"end\" event")))
end)) then end;
if form:on(("error"), (function (this, e)
if res:writeHead((500)) then end;
if (function () local base, prop = res, "end"; return base[prop](base, e.message); end)() then end;
end)) then end;
if form:parse(req) then end;
end));
if server:listen((0), (function (this)
local body, req = body, req;
body = (((((((((("--foo\r\n") +
    ("Content-Disposition: form-data; name=\"file1\"; filename=\"file1\"\r\n")) +
    ("Content-Type: application/octet-stream\r\n")) +
    ("\r\nThis is the first file\r\n")) +
    ("--foo\r\n")) +
    ("Content-Type: application/octet-stream\r\n")) +
    ("Content-Disposition: form-data; name=\"file2\"; filename=\"file2\"\r\n")) +
    ("Content-Transfer-Encoding: unknown\r\n")) +
    ("\r\nThis is the second file\r\n")) +
    ("--foo--\r\n"));
req = http:request(_obj({
  ["method"]=("POST"),
  ["port"]=(server:address()).port,
  ["headers"]=_obj({
  ["Content-Length"]=(body).length,
  ["Content-Type"]=("multipart/form-data; boundary=foo")})}));
if req:on(("response"), (function (this, res)
if assert:equal(res.statusCode, (500)) then end;
if res:on(("data"), (function (this)

end)) then end;
if res:on(("end"), (function (this)
if server:close() then end;
end)) then end;
end)) then end;
if (function () local base, prop = req, "end"; return base[prop](base, body); end)() then end;
end)) then end;

return _module.exports;
end