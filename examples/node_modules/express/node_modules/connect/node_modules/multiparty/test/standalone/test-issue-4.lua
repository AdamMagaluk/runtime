function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local http, multiparty, assert, superagent, path, server, fixture = http, multiparty, assert, superagent, path, server, fixture;
fixture = (function (this, name)
local fixture = _debug.getinfo(1, 'f').func;
if true then return path:join(____dirname, (".."), ("fixture"), ("file"), name); end;
end);
http = require(global, ("http"));
multiparty = require(global, ("../../"));
assert = require(global, ("assert"));
superagent = require(global, ("superagent"));
path = require(global, ("path"));
server = http:createServer((function (this, req, res)
local form, fileCount = form, fileCount;
if assert:strictEqual(req.url, ("/upload")) then end;
if assert:strictEqual(req.method, ("POST")) then end;
form = _new((multiparty).Form, _obj({
  ["autoFields"]=true,
  ["autoFiles"]=true}));
if form:on(("error"), (function (this, err)
if console:log(err) then end;
end)) then end;
if form:on(("close"), (function (this)

end)) then end;
fileCount = (0);
if form:on(("file"), (function (this, name, file)
fileCount = fileCount + (1);
end)) then end;
if form:parse(req, (function (this, err, fields, files)
local objFileCount, file = objFileCount, file;
objFileCount = (0);
for file in _pairs(files) do
objFileCount = objFileCount + (1);
end
if assert:strictEqual(fileCount, (2)) then end;
if assert:strictEqual(objFileCount, (1)) then end;
if (function () local base, prop = res, "end"; return base[prop](base); end)() then end;
end)) then end;
end));
if server:listen((function (this)
local url, req = url, req;
url = ((("http:--localhost:") + (server:address()).port) + ("/upload"));
req = superagent:post(url);
if req:attach(("files[]"), fixture(global, ("pf1y5.png")), ("SOG2.JPG")) then end;
if req:attach(("files[]"), fixture(global, ("binaryfile.tar.gz")), ("BenF364_LIB353.zip")) then end;
if (function () local base, prop = req, "end"; return base[prop](base, (function (this, err, resp)
if assert:ifError(err) then end;
if resp:on(("end"), (function (this)
if server:close() then end;
end)) then end;
end)); end)() then end;
end)) then end;

return _module.exports;
end