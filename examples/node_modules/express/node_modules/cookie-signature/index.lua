function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local crypto = crypto;
crypto = require(global, ("crypto"));
(exports).sign = (function (this, val, secret)
if (("string") ~= _typeof(val)) then
_error(_new(TypeError, ("cookie required")))
end
if (("string") ~= _typeof(secret)) then
_error(_new(TypeError, ("secret required")))
end
if true then return ((val + (".")) + crypto:createHmac(("sha256"), secret):update(val):digest(("base64")):replace(_regexp("\\=+$", ""), (""))); end;
end);
(exports).unsign = (function (this, val, secret)
local str = str;
if (("string") ~= _typeof(val)) then
_error(_new(TypeError, ("cookie required")))
end
if (("string") ~= _typeof(secret)) then
_error(_new(TypeError, ("secret required")))
end
str = val:slice((0), val:lastIndexOf((".")));
if true then return (_truthy((exports:sign(str, secret) == val)) and {str} or {(false)})[1]; end;
end);

return _module.exports;
end