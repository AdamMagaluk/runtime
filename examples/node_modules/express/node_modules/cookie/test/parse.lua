function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local assert, cookie = assert, cookie;
assert = require(global, ("assert"));
cookie = require(global, (".."));
if suite(global, ("parse")) then end;
if test(global, ("basic"), (function (this)
if assert:deepEqual(_obj({
  ["foo"]=("bar")}), cookie:parse(("foo=bar"))) then end;
if assert:deepEqual(_obj({
  ["foo"]=("123")}), cookie:parse(("foo=123"))) then end;
end)) then end;
if test(global, ("ignore spaces"), (function (this)
if assert:deepEqual(_obj({
  ["FOO"]=("bar"),
  ["baz"]=("raz")}), cookie:parse(("FOO    = bar;   baz  =   raz"))) then end;
end)) then end;
if test(global, ("escaping"), (function (this)
if assert:deepEqual(_obj({
  ["foo"]=("bar=123456789&name=Magic+Mouse")}), cookie:parse(("foo=\"bar=123456789&name=Magic+Mouse\""))) then end;
if assert:deepEqual(_obj({
  ["email"]=(" \",;/")}), cookie:parse(("email=%20%22%2c%3b%2f"))) then end;
end)) then end;
if test(global, ("ignore escaping error and return original value"), (function (this)
if assert:deepEqual(_obj({
  ["foo"]=("%1"),
  ["bar"]=("bar")}), cookie:parse(("foo=%1;bar=bar"))) then end;
end)) then end;
if test(global, ("ignore non values"), (function (this)
if assert:deepEqual(_obj({
  ["foo"]=("%1"),
  ["bar"]=("bar")}), cookie:parse(("foo=%1;bar=bar;HttpOnly;Secure"))) then end;
end)) then end;
if test(global, ("unencoded"), (function (this)
if assert:deepEqual(_obj({
  ["foo"]=("bar=123456789&name=Magic+Mouse")}), cookie:parse(("foo=\"bar=123456789&name=Magic+Mouse\""), _obj({
  ["decode"]=(function (this, value)
if true then return value; end;
end)}))) then end;
if assert:deepEqual(_obj({
  ["email"]=("%20%22%2c%3b%2f")}), cookie:parse(("email=%20%22%2c%3b%2f"), _obj({
  ["decode"]=(function (this, value)
if true then return value; end;
end)}))) then end;
end))
 then end;

return _module.exports;
end