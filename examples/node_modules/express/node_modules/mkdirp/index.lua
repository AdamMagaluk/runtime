function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local path, fs, mkdirP, sync = path, fs, mkdirP, sync;
mkdirP = (function (this, p, mode, f, made)
local mkdirP = _debug.getinfo(1, 'f').func;
local cb = cb;
if _truthy((_typeof(mode) == ("function")) or (mode == undefined)) then
f = mode;
mode = _bit.band((511), _bit.bnot(process:umask()));
end
if (not (made)) then
made = (null);
end
cb = f or (function (this)

end);
if (_typeof(mode) == ("string")) then
mode = parseInt(global, mode, (8));
end
p = path:resolve(p);
if fs:mkdir(p, mode, (function (this, er)
if (not (er)) then
made = made or p;
if true then return cb(global, (null), made); end;
end
repeat
local _0 = ("ENOENT"); local _1;
local _r = (er).code;
if _r == _0 then
if mkdirP(global, path:dirname(p), mode, (function (this, er, made)
if _truthy(er) then
if cb(global, er, made) then end;
else
if mkdirP(global, p, mode, cb, made) then end;
end
end)) then end;
_c = _break; break;
end
if fs:stat(p, (function (this, er2, stat)
if _truthy(er2 or (not (stat:isDirectory()))) then
if cb(global, er, made)
                     then end;
else
if cb(global, (null), made) then end;
end
end)) then end;
_c = _break; break;
until true
end)) then end;
end);
path = require(global, ("path"));
fs = require(global, ("fs"));
(module).exports = (function () local _r = (function () local _r = mkdirP; (mkdirP).mkdirP = _r; return _r; end)(); (mkdirP).mkdirp = _r; return _r; end)();
(mkdirP).sync = (function () sync = (function (this, p, mode, made)
local sync = _debug.getinfo(1, 'f').func;
local stat = stat;
if (mode == undefined) then
mode = _bit.band((511), _bit.bnot(process:umask()));
end
if (not (made)) then
made = (null);
end
if (_typeof(mode) == ("string")) then
mode = parseInt(global, mode, (8));
end
p = path:resolve(p);
local _e = nil
local _s, _r = _xpcall(function ()
if fs:mkdirSync(p, mode) then end;
made = made or p;
    end, function (err)
        _e = err
    end)
if _s == false then
err0 = _e;
repeat
local _0 = ("ENOENT"); local _1;
local _r = (err0).code;
if _r == _0 then
made = sync(global, path:dirname(p), mode, made);
if sync(global, p, mode, made) then end;
_c = _break; return _break;
end
stat = nil;
local _e = nil
local _s, _r = _xpcall(function ()
stat = fs:statSync(p);
    end, function (err)
        _e = err
    end)
if _s == false then
err1 = _e;
_error(err0)
end

if _r == _break then
return _break;
elseif _r == _cont then
return _cont;
end
if (not (stat:isDirectory())) then
_error(err0)
end
_c = _break; return _break;
until true
end

if true then return made; end;
end); return sync; end)();

return _module.exports;
end