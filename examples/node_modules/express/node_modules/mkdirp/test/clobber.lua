function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local mkdirp, path, fs, test, ps, i, dir, file, itw = mkdirp, path, fs, test, ps, i, dir, file, itw;
mkdirp = (require(global, ("../"))).mkdirp;
path = require(global, ("path"));
fs = require(global, ("fs"));
test = (require(global, ("tap"))).test;
ps = _arr({[0]=(""), ("tmp")});
i = (0);
while (i < (25)) do

dir = Math:floor((Math:random() * Math:pow((16), (4)))):toString((16));
if ps:push(dir) then end;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
file = ps:join(("/"));
itw = ps:slice((0), (3)):join(("/"));
if test(global, ("clobber-pre"), (function (this, t)
if (function () local base, prop = console, "error"; return base[prop](base, (("about to write to ")+itw)); end)()
     then end;
if fs:writeFileSync(itw, ("I AM IN THE WAY, THE TRUTH, AND THE LIGHT.")) then end;
if fs:stat(itw, (function (this, er, stat)
if t:ifError(er)
         then end;
if t:ok(stat and stat:isFile(), ("should be file"))
         then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)()
     then end;
end))
 then end;
end))

 then end;
if test(global, ("clobber"), (function (this, t)
if t:plan((2)) then end;
if mkdirp(global, file, (493), (function (this, err)
if t:ok(err) then end;
if t:equal(err.code, ("ENOTDIR")) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end)) then end;
end)) then end;

return _module.exports;
end