function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local mkdirp, path, fs, test = mkdirp, path, fs, test;
mkdirp = require(global, ("../"));
path = require(global, ("path"));
fs = require(global, ("fs"));
test = (require(global, ("tap"))).test;
if test(global, ("woo"), (function (this, t)
local x, y, z, file = x, y, z, file;
if t:plan((2)) then end;
x = Math:floor((Math:random() * Math:pow((16), (4)))):toString((16));
y = Math:floor((Math:random() * Math:pow((16), (4)))):toString((16));
z = Math:floor((Math:random() * Math:pow((16), (4)))):toString((16));
file = (("/tmp/") + _arr({[0]=x, y, z}):join(("/")));
if mkdirp(global, file, (493), (function (this, err)
if _truthy(err) then
if t:fail(err) then end;
else
if path:exists(file, (function (this, ex)
if (not (ex)) then
if t:fail(("file not created"))
             then end;
else
if fs:stat(file, (function (this, err, stat)
if _truthy(err) then
if t:fail(err)
                 then end;
else
if t:equal(_bit.band((stat).mode, (511)), (493)) then end;
if t:ok(stat:isDirectory(), ("target not a directory")) then end;
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end
end))
         then end;
end
end))
     then end;
end
end)) then end;
end)) then end;

return _module.exports;
end