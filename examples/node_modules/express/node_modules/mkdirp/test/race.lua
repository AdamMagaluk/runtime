function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local mkdirp, path, fs, test = mkdirp, path, fs, test;
mkdirp = (require(global, ("../"))).mkdirp;
path = require(global, ("path"));
fs = require(global, ("fs"));
test = (require(global, ("tap"))).test;
if test(global, ("race"), (function (this, t)
local ps, i, dir, file, res, mk = ps, i, dir, file, res, mk;
mk = (function (this, file, cb)
local mk = _debug.getinfo(1, 'f').func;
if mkdirp(global, file, (493), (function (this, err)
if _truthy(err) then
if t:fail(err) then end;
else
if path:exists(file, (function (this, ex)
if (not (ex)) then
if t:fail(("file not created"))
                 then end;
else
if fs:stat(file, (function (this, err, stat)
if _truthy(err) then
if t:fail(err)
                     then end;
else
if t:equal(_bit.band((stat).mode, (511)), (493)) then end;
if t:ok(stat:isDirectory(), ("target not a directory")) then end;
if _truthy(cb) then
if cb(global) then end;
end
end
end))
             then end;
end
end))
         then end;
end
end)) then end;
end);
if t:plan((4)) then end;
ps = _arr({[0]=(""), ("tmp")});
i = (0);
while (i < (25)) do

dir = Math:floor((Math:random() * Math:pow((16), (4)))):toString((16));
if ps:push(dir) then end;

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
file = ps:join(("/"));
res = (2);
if mk(global, file, (function (this)
if ((function () res = res - 1; return res; end)() == (0)) then
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end
end)) then end;
if mk(global, file, (function (this)
if ((function () res = res - 1; return res; end)() == (0)) then
if (function () local base, prop = t, "end"; return base[prop](base); end)() then end;
end
end)) then end;
end)) then end;

return _module.exports;
end