function (_ENV)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local _module = _obj({exports=_obj({})}); local exports, module = _module.exports, _module;

local mime, assert, path, eq, apacheTypes, nodeTypes, keys, i = mime, assert, path, eq, apacheTypes, nodeTypes, keys, i;
eq = (function (this, ...)
local eq = _debug.getinfo(1, 'f').func;
local arguments = _arguments(...);
local a, b = ...;
if console:log((((("Test: ") + a) + (" === ")) + b)) then end;
if (assert).strictEqual:apply((null), arguments) then end;
end);
mime = require(global, ("./mime"));
assert = require(global, ("assert"));
path = require(global, ("path"));
if console:log(((Object:keys(mime.extensions)).length + (" types"))) then end;
if console:log(((Object:keys(mime.types)).length + (" extensions\n"))) then end;
if eq(global, ("text/plain"), mime:lookup(("text.txt"))) then end;
if eq(global, ("text/plain"), mime:lookup(("TEXT.TXT"))) then end;
if eq(global, ("text/plain"), mime:lookup(("dir/text.txt"))) then end;
if eq(global, ("text/plain"), mime:lookup((".text.txt"))) then end;
if eq(global, ("text/plain"), mime:lookup((".txt"))) then end;
if eq(global, ("text/plain"), mime:lookup(("txt"))) then end;
if eq(global, ("text/plain"), mime:lookup(("/txt"))) then end;
if eq(global, ("text/plain"), mime:lookup(("\\txt"))) then end;
if eq(global, ("application/octet-stream"), mime:lookup(("text.nope"))) then end;
if eq(global, ("fallback"), mime:lookup(("text.fallback"), ("fallback"))) then end;
if eq(global, ("txt"), mime:extension((mime).types.text)) then end;
if eq(global, ("html"), mime:extension((mime).types.htm)) then end;
if eq(global, ("bin"), mime:extension(("application/octet-stream"))) then end;
if eq(global, ("bin"), mime:extension(("application/octet-stream "))) then end;
if eq(global, ("html"), mime:extension((" text/html; charset=UTF-8"))) then end;
if eq(global, ("html"), mime:extension(("text/html; charset=UTF-8 "))) then end;
if eq(global, ("html"), mime:extension(("text/html; charset=UTF-8"))) then end;
if eq(global, ("html"), mime:extension(("text/html ; charset=UTF-8"))) then end;
if eq(global, ("html"), mime:extension(("text/html;charset=UTF-8"))) then end;
if eq(global, ("html"), mime:extension(("text/Html;charset=UTF-8"))) then end;
if eq(global, undefined, mime:extension(("unrecognized"))) then end;
if eq(global, ("application/font-woff"), mime:lookup(("file.woff"))) then end;
if eq(global, ("application/octet-stream"), mime:lookup(("file.buffer"))) then end;
if eq(global, ("audio/mp4"), mime:lookup(("file.m4a"))) then end;
if eq(global, ("font/opentype"), mime:lookup(("file.otf"))) then end;
if eq(global, ("UTF-8"), (mime).charsets:lookup(("text/plain"))) then end;
if eq(global, undefined, (mime).charsets:lookup((mime).types.js)) then end;
if eq(global, ("fallback"), (mime).charsets:lookup(("application/octet-stream"), ("fallback"))) then end;
apacheTypes = _new((mime).Mime);
nodeTypes = _new((mime).Mime);
if apacheTypes:load(path:join(____dirname, ("types/mime.types"))) then end;
if nodeTypes:load(path:join(____dirname, ("types/node.types"))) then end;
keys = _arr({}):concat(Object:keys(apacheTypes.types)):concat(Object:keys(nodeTypes.types));
if keys:sort() then end;
i = (1);
while (i < (keys).length) do

if _truthy(((keys)[i] == (keys)[(i-(1))])) then
if console:warn(((((((((("Warning: ") +
      ("node.types defines ")) + (keys)[i]) + ("->")) + ((nodeTypes).types)[(keys)[i]]) +
      (", mime.types defines ")) + (keys)[i]) + ("->")) + ((apacheTypes).types)[(keys)[i]])) then end;
end

if (function () local _r = i; i = _r + 1; return _r end)() then end;
end
if console:log(("\nOK")) then end;

return _module.exports;
end