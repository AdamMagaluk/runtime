
return function (_ENV, _module)
local string, math, print, type, pairs = nil, nil, nil, nil, nil;
local exports, module = _module.exports, _module;

local tm = tm;
tm = process:binding(("tm"));
(exports).readFileSync = (function (this, pathname) 
local fd, res, len, buf = fd, res, len, buf;
if console:log((tm).OPEN_EXISTING, (tm).OPEN_EXISTING or (0)) then end; 
if console:log((tm).RDONLY, (tm).RDONLY or (0)) then end; 
fd = (function () local base, prop = tm, "fs_open"; return base[prop](base, pathname, _bit.bor((tm).OPEN_EXISTING or 0, (tm).RDONLY or 0)); end)();
if _truthy((fd == undefined)) then
_error((("ENOENT: Could not open file ") + pathname))
end;
res = _arr({});
while _truthy((true)) do 

if _truthy(((function () local base, prop = tm, "fs_readable"; return base[prop](base, fd); end)() == (0))) then
len = (100);
buf = (function () local base, prop = tm, "fs_read"; return base[prop](base, fd, len); end)();
if _truthy(buf and ((buf).length > (0))) then
if res:push(buf) then end; 
end;
if _truthy((not _truthy(buf)) or ((buf).length < len)) then
_c = _break; break;
end;
end;

end;
if (function () local base, prop = tm, "fs_close"; return base[prop](base, fd); end)() then end; 
if true then return res:join(("")); end;
end);
(exports).readdirSync = (function (this, pathname) 
local dir, entries = dir, entries;
dir = (function () local base, prop = tm, "fs_dir_open"; return base[prop](base, pathname); end)();
if _truthy((dir == undefined)) then
_error((("ENOENT: Could not open directory ") + pathname))
end;
entries = _arr({});
while ((function () local _r = (function () local base, prop = tm, "fs_dir_read"; return base[prop](base, dir); end)(); ent = _r; return _r; end)() ~= undefined) do 

if _truthy((ent ~= (".")) and (ent ~= (".."))) then
if entries:push(ent) then end; 
end;

end;
if (function () local base, prop = tm, "fs_dir_close"; return base[prop](base, dir); end)() then end; 
if true then return entries; end;
end);
(exports).readdir = (function (this, pathname, next) 
if setImmediate(global, (function (this) 
if next(global, (null), exports:readdirSync(pathname)) then end; 
end))
 then end; 
end)

;
(exports).readFile = (function (this, pathname, next) 
if setImmediate(global, (function (this) 
if next(global, (null), exports:readFileSync(pathname)) then end; 
end)) then end; 
end);

return _module.exports;
end 

